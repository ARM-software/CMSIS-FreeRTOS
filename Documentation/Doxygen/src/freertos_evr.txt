// Group creation for Reference
/**
\addtogroup freertos_specific CMSIS-FreeRTOS Specifics
\brief This section describes CMSIS-FreeRTOS specifics.
\details
CMSIS-FreeRTOS interfaces to the
<a href="https://arm-software.github.io/CMSIS-View/latest/evr.html" target="_blank"><b>Event Recorder</b></a>
to provide event information which helps you to understand and analyze the operation. Refer to \ref freertos_evr for more
information.
*/

/**
\defgroup freertos_setup Event Recorder Setup
\ingroup freertos_specific
\brief Information about Event Recorder configuration and setup
\details
CMSIS-FreeRTOS interfaces to the
<a href="https://arm-software.github.io/CMSIS-View/latest/evr.html" target="_blank"><b>Event Recorder</b></a>
to provide event information which helps you to understand and analyze the operation.

To use the Event Recorder together with CMSIS-FreeRTOS, it is required to create an image that generates event information.
The steps are described under \ref page_create_project.
@{
*/

/**
\fn void EvrFreeRTOSSetup (uint32_t reset)
\details
The function \b EvrFreeRTOSSetup initializes Event Recorder and configures recording level filter. It must be called before any event is sent to the Event Recorder.

The argument \a reset specifies if reset of previously applied configuration is performed in case if EvrFreeRTOSSetup was already called.

Behavior of this function execution is defined with Event Recorder Configuration (\ref configure_evr). Calling this function has
no effect when Event Recorder component is not selected.

\note \b EvrFreeRTOSSetup is called by function \b osKernelInitialize when CMSIS-RTOS2 API is in use and should not be called explicitly.
*/

/**
@}
*/

/** 
\defgroup freertos_evr Event functions
\ingroup freertos_specific 
\brief FreeRTOS Event Recorder functions
\details
CMSIS-FreeRTOS interfaces to the
<a href="https://arm-software.github.io/CMSIS-View/latest/evr.html" target="_blank"><b>Event Recorder</b></a> 
to provide event information which helps you to understand and analyze the operation.

To use the Event Recorder together with CMSIS-FreeRTOS, it is required to create an image that generates event information.
The steps are:
  - <a href="https://arm-software.github.io/CMSIS-View/latest/er_use.html#Add_Event_Recorder" target="_blank"><b>Add Event Recorder</b></a>: Select in the RTE management dialog the software component <b>Compiler:Event Recorder</b>.
  - \ref configure_evr : Use configEVR_ definitions in FreeRTOSConfig.h to enable Event Recorder initialization and setup event filter.
  - Build the application code and download it to the debug hardware.
  
Once the target application generates event information, it can be viewed in the ÂµVision debugger using the <b>Event Recorder</b>.
@{
*/

/**
\defgroup freertos_evr_tasks Tasks Functions
\brief Events generated by tasks functions 
\details
@{
*/

/**
\fn void EvrFreeRTOSTasks_TaskCreate (TCB_t pxNewTCB)
\details
The event \b TaskCreate is generated when task object is successfully created.

\b Value in the Event Recorder shows:
 - \b pxNewTCB : pointer to task object handle (control block address).
*/

/**
\fn void EvrFreeRTOSTasks_TaskCreateFailed (void)
\details
The event \b TaskCreateFailed is generated when task object create fails due to insufficient heap memory.
*/

/**
\fn void EvrFreeRTOSTasks_TaskDelete (TCB_t pxTCB)
\details
The event \b TaskDelete is generated when the task is successfully added into thread termination list.

\b Value in the Event Recorder shows:
 - \b pxTCB : pointer to task object handle (control block address).
*/

/**
\fn void EvrFreeRTOSTasks_TaskDelayUntil (uint32_t xTimeToWake)
\details
The event \b TaskDelayUntil is generated before the current running task execution is delayed.

\b Value in the Event Recorder shows:
 - \b xTimeToWake : wake time in ticks.
*/

/**
\fn void EvrFreeRTOSTasks_TaskDelay (uint32_t xTicksToDelay)
\details
The event \b TaskDelay is generated when the current running task execution is delayed.

\b Value in the Event Recorder shows:
 - \b xTicksToDelay : number of ticks to delay. 
*/

/**
\fn void EvrFreeRTOSTasks_TaskPrioritySet (TCB_t pxTCB, uint32_t uxNewPriority)
\details
The event \b TaskPrioritySet is generated when task priority is set.

\b Value in the Event Recorder shows:
 - \b pxTCB : pointer to task object handle (control block address).
 - \b uxNewPriority : task new priority .
*/

/**
\fn void EvrFreeRTOSTasks_TaskSuspend (TCB_t pxTCB)
\details
The event \b TaskSuspend is generated when task execution is suspended.

\b Value in the Event Recorder shows:
 - \b pxTCB : pointer to task object handle (control block address).
*/

/**
\fn void EvrFreeRTOSTasks_TaskResume (TCB_t pxTCB)
\details
The event \b TaskResume is generated when task execution is resumed.

\b Value in the Event Recorder shows:
 - \b pxTCB : pointer to task object handle (control block address).
*/

/**
\fn void EvrFreeRTOSTasks_TaskResumeFromIsr (TCB_t pxTCB)
\details
The event \b TaskResumeFromIsr is generated when task execution is resumed from the ISR.

\b Value in the Event Recorder shows:
 - \b pxTCB : pointer to task object handle (control block address).
*/

/**
\fn void EvrFreeRTOSTasks_TaskIncrementTick (uint32_t xTickCount)
\details
The event \b TaskIncrementTick is generated on every tick increment.

\b Value in the Event Recorder shows:
 - \b xTickCount : tick count before increment.
*/

/**
\fn void EvrFreeRTOSTasks_IncreaseTickCount (uint32_t xTicksToJump)
\details
The event \b IncreaseTickCount is generated when tick count is increased by the number of ticks spent in low power mode.

\b Value in the Event Recorder shows:
 - \b xTicksToJump : number of ticks by which the tick count is increased.
*/

/**
\fn void EvrFreeRTOSTasks_TaskSwitchedOut (TCB_t pxCurrentTCB)
\details
The event \b TaskSwitchedOut is generated before a new task is selected to run.

\b Value in the Event Recorder shows:
 - \b pxCurrentTCB : pointer to task object handle (control block address).
*/

/**
\fn void EvrFreeRTOSTasks_TaskSwitchedIn  (TCB_t pxCurrentTCB, uint32_t uxTopPriority)
\details
The event \b TaskSwitchedIn is generated after a task has been selected to run.

\b Value in the Event Recorder shows:
 - \b pxCurrentTCB : pointer to task object handle (control block address).
 - \b uxTopPriority : task priority
*/

/**
\fn void EvrFreeRTOSTasks_TaskPriorityInherit (TCB_t pxTCBOfMutexHolder, uint32_t uxInheritedPriority)
\details
The event \b TaskPriorityInherit is generated when task priority is inherited from the current running task.

\b Value in the Event Recorder shows:
 - \b pxTCBOfMutexHolder : pointer to task object handle (control block address).
 - \b uxInheritedPriority : inherited task priority
*/

/**
\fn void EvrFreeRTOSTasks_TaskPriorityDisinherit (TCB_t pxTCBOfMutexHolder, uint32_t uxOriginalPriority)
\details
The event \b TaskPriorityDisinherit is generated when task priority is disinherited to its base priority.

\b Value in the Event Recorder shows:
 - \b pxTCBOfMutexHolder : pointer to task object handle (control block address).
 - \b uxOriginalPriority : task base priority
*/

/**
\fn void EvrFreeRTOSTasks_MovedTaskToReadyState (TCB_t pxTCB)
\details
The event \b MovedTaskToReadyState is generated before the task is transitioned into the Ready state.

\b Value in the Event Recorder shows:
 - \b pxTCB : pointer to task object handle (control block address).
*/

/**
\fn void EvrFreeRTOSTasks_PostMovedTaskToReadyState (TCB_t pxTCB)
\details
The event \b PostMovedTaskToReadyState is generated after the task is transitioned into the Ready state.

\b Value in the Event Recorder shows:
 - \b pxTCB : pointer to task object handle (control block address).
*/

/**
\fn void EvrFreeRTOSTasks_LowPowerIdleBegin (uint32_t xExpectedIdleTime)
\details
The event \b LowPowerIdleBegin is generated when task scheduler enters the low power mode.

\b Value in the Event Recorder shows:
 - \b xExpectedIdleTime : expected idle time in ticks.
*/

/**
\fn void EvrFreeRTOSTasks_LowPowerIdleEnd (void)
\details
The event \b LowPowerIdleEnd is generated when task scheduler exits from the low power mode.
*/

/**
\fn void EvrFreeRTOSTasks_TaskNotifyTakeBlock (uint32_t uxIndexToWait, uint32_t xTicksToWait)
\details
The event \b TaskNotifyTakeBlock is generated when the current running task is about to block and wait to take notification.

\b Value in the Event Recorder shows:
 - \b uxIndexToWait : task notification index
 - \b xTicksToWait : wait timeout in ticks.
*/

/**
\fn void EvrFreeRTOSTasks_TaskNotifyTake (uint32_t uxIndexToWait, uint32_t ulNotifiedValue)
\details
The event \b TaskNotifyTake is generated when task notify take is successfully executed.
 
\b Value in the Event Recorder shows:
 - \b uxIndexToWait : task notification index
 - \b ulNotifiedValue : current state of the notification value.
*/

/**
\fn void EvrFreeRTOSTasks_TaskNotifyWaitBlock (uint32_t uxIndexToWait, uint32_t xTicksToWait)
\details
The event \b TaskNotifyWaitBlock is generated when the current running task is about to block and wait to receive notification.

\b Value in the Event Recorder shows:
 - \b uxIndexToWait : task notification index
 - \b xTicksToWait : wait timeout in ticks.
*/

/**
\fn void EvrFreeRTOSTasks_TaskNotifyWait (uint32_t uxIndexToWait, uint32_t ulNotifiedValue)
\details
The event \b TaskNotifyWait is generated when task notify wait is completed.

\b Value in the Event Recorder shows:
 - \b uxIndexToWait : task notification index
 - \b ulNotifiedValue : current state of the notification value.
*/

/**
\fn void EvrFreeRTOSTasks_TaskNotify (TCB_t xTaskToNotify, uint32_t uxIndexToWait, uint32_t eAction, uint32_t ulNotifiedValue)
\details
The event \b TaskNotify is generated when task notify is successfully executed.

\b Value in the Event Recorder shows:
 - \b xTaskToNotify : pointer to task object handle (control block address).
 - \b uxIndexToWait : task notification index
 - \b eAction : task notification action (eNotifyAction).
 - \b ulNotifiedValue : current state of the notification value.
*/

/**
\fn void EvrFreeRTOSTasks_TaskNotifyFromIsr (TCB_t xTaskToNotify, uint32_t uxIndexToWait, uint32_t eAction, uint32_t ulNotifiedValue)
\details
The event \b TaskNotifyFromIsr is generated when task notify from ISR is successfully executed.

\b Value in the Event Recorder shows:
 - \b xTaskToNotify : pointer to task object handle (control block address).
 - \b uxIndexToWait : task notification index
 - \b eAction : task notification action (eNotifyAction).
 - \b ulNotifiedValue : current state of the notification value.
*/

/**
\fn void EvrFreeRTOSTasks_TaskNotifyGiveFromIsr (TCB_t xTaskToNotify, uint32_t ulNotifiedValue)
\details
The event \b TaskNotifyGiveFromIsr is generated when task notify give from ISR is successfully executed.

\b Value in the Event Recorder shows:
 - \b xTaskToNotify : pointer to task object handle (control block address).
 - \b uxIndexToWait : task notification index
 - \b ulNotifiedValue : current state of the notification value.
*/

/**
\fn void EvrFreeRTOSTasks_MovedTaskToDelayedList (TCB_t pxTCB)
\details
The event \b MovedTaskToDelayedList is generated when the wake time has not overflowed and a task is moved into the Delayed list.

\b Value in the Event Recorder shows:
 - \b pxTCB : pointer to running task handle (control block address).
*/

/**
\fn void EvrFreeRTOSTasks_MovedTaskToOverflowDelayedList (TCB_t pxTCB)
\details
The event \b MovedTaskToOverflowDelayedList is generated when the wake time has overflowed and a task is moved into the Overflow Delayed list.

\b Value in the Event Recorder shows:
 - \b pxTCB : pointer to running task handle (control block address).
*/

/**
\fn void EvrFreeRTOSTasks_xTaskCreateStatic (void *pxTaskCode, const char *pcName, const uint32_t ulStackDepth, void *pvParameters, uint32_t uxPriority, void *puxStackBuffer, void *pxTaskBuffer)
\details
The event \b xTaskCreateStatic is generated when function xTaskCreateStatic is called.

\b Value in the Event Recorder shows:
 - \b pxTaskCode         : pointer to task function.
 - \b pcName             : pointer to task name string.
 - \b ulStackDepth       : stack depth.
 - \b pvParameters       : pointer to parameter(s) passed to task funtion.
 - \b uxPriority         : task priority.
 - \b puxStackBuffer     : pointer to buffer to be used for task stack.
 - \b pxTaskBuffer       : pointer to buffer to be used for task control block.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskCreateStatic_Return (TCB_t xReturn)
\details
The event \b xTaskCreateStatic_Return is generated before function xTaskCreateStatic returns.

\b Value in the Event Recorder shows:
 - \b xReturn : pointer to created task handle.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskCreateStaticAffinitySet (void *pxTaskCode, const char *pcName, const uint32_t ulStackDepth, void *pvParameters, uint32_t uxPriority, void *puxStackBuffer, void *pxTaskBuffer, uint32_t uxCoreAffinityMask)
\details
The event \b xTaskCreateStaticAffinitySet is generated when function xTaskCreateStaticAffinitySet is called.

\b Value in the Event Recorder shows:
 - \b pxTaskCode         : pointer to task function.
 - \b pcName             : pointer to task name string.
 - \b ulStackDepth       : stack depth.
 - \b pvParameters       : pointer to parameter(s) passed to task funtion.
 - \b uxPriority         : task priority.
 - \b puxStackBuffer     : pointer to buffer to be used for task stack.
 - \b pxTaskBuffer       : pointer to buffer to be used for task control block.
 - \b uxCoreAffinityMask : task affinity mask.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskCreateStaticAffinitySet_Return (TCB_t xReturn)
\details
The event \b  is generated before function xTaskCreateStaticAffinitySet_Return returns.

\b Value in the Event Recorder shows:
 - \b xReturn : pointer to created task handle.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskCreateRestrictedStatic (const TaskParameters_t *pxTaskDefinition, TaskHandle_t *pxCreatedTask)
\details
The event \b xTaskCreateRestrictedStatic is generated when function xTaskCreateRestrictedStatic is called.

\b Value in the Event Recorder shows:
 - \b pxTaskDefinition : pointer to parameters required to create an MPU protected task.
 - \b pxCreatedTask    : pointer to where the created task handle is stored.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskCreateRestrictedStatic_Return (uint32_t xReturn)
\details
The event \b xTaskCreateRestrictedStatic_Return is generated before function xTaskCreateRestrictedStatic returns.

\b Value in the Event Recorder shows:
 - \b xReturn : return status.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskCreateRestrictedStaticAffinitySet (const TaskParameters_t * pxTaskDefinition, UBaseType_t uxCoreAffinityMask, TaskHandle_t *pxCreatedTask)
\details
The event \b xTaskCreateRestrictedStaticAffinitySet is generated when function xTaskCreateRestrictedStaticAffinitySet is called.

\b Value in the Event Recorder shows:
 - \b pxTaskDefinition   : pointer to parameters required to create an MPU protected task.
 - \b uxCoreAffinityMask : affinity mask
 - \b pxCreatedTask      : pointer to where the created task handle is stored.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskCreateRestrictedStaticAffinitySet_Return (uint32_t xReturn) 
\details
The event \b xTaskCreateRestrictedStaticAffinitySet_Return is generated before function xTaskCreateRestrictedStaticAffinitySet returns.

\b Value in the Event Recorder shows:
 - \b xReturn : return status.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskCreateRestricted (const TaskParameters_t *pxTaskDefinition, TaskHandle_t *pxCreatedTask)
\details
The event \b xTaskCreateRestricted is generated when function xTaskCreateRestricted is called.

\b Value in the Event Recorder shows:
 - \b pxTaskDefinition : pointer to parameters required to create an MPU protected task.
 - \b pxCreatedTask    : pointer to where the created task handle is stored.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskCreateRestricted_Return (uint32_t xReturn) 
\details
The event \b xTaskCreateRestricted_Return is generated before function xTaskCreateRestricted returns.

\b Value in the Event Recorder shows:
 - \b xReturn : return status. 
*/

/**
\fn void EvrFreeRTOSTasks_xTaskCreateRestrictedAffinitySet (TaskParameters_t *pxTaskDefinition, uint32_t uxCoreAffinityMask, void *pxCreatedTask)
\details
The event \b xTaskCreateRestrictedAffinitySet is generated when function xTaskCreateRestrictedAffinitySet is called.

\b Value in the Event Recorder shows:
 - \b pxTaskDefinition   : pointer to parameters required to create an MPU protected task.
 - \b uxCoreAffinityMask : affinity mask.
 - \b pxCreatedTask      : pointer to where the created task handle is stored.

*/

/**
\fn void EvrFreeRTOSTasks_xTaskCreateRestrictedAffinitySet_Return (uint32_t xReturn) 
\details
The event \b xTaskCreateRestrictedAffinitySet_Return is generated before function xTaskCreateRestrictedAffinitySet returns.

\b Value in the Event Recorder shows:
 - \b xReturn : return status. 
*/

/**
\fn void EvrFreeRTOSTasks_xTaskCreate (void *pxTaskCode, const char *pcName, uint32_t uxStackDepth, void *pvParameters, uint32_t uxPriority, void *pxCreatedTask)
\details
The event \b xTaskCreate is generated when function xTaskCreate is called.

\b Value in the Event Recorder shows:
 - \b pxTaskCode    : pointer to task function.
 - \b pcName        : pointer to task name string.
 - \b uxStackDepth  : stack depth.
 - \b pvParameters  : pointer to parameter(s) passed to task funtion.
 - \b uxPriority    : task priority.
 - \b pxCreatedTask : pointer to where the created task handle is stored.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskCreate_Return (uint32_t xReturn) 
\details
The event \b xTaskCreate_Return is generated before function xTaskCreate returns.

\b Value in the Event Recorder shows:
 - \b xReturn : return status. 
*/

/**
\fn void EvrFreeRTOSTasks_xTaskCreateAffinitySet (void *pxTaskCode, const char *pcName, const uint32_t uxStackDepth, void *pvParameters, uint32_t uxPriority, uint32_t uxCoreAffinityMask, void *pxCreatedTask) 
\details
The event \b xTaskCreateAffinitySet is generated when function xTaskCreateAffinitySet is called.

\b Value in the Event Recorder shows:
 - \b pxTaskCode         : pointer to task function.
 - \b pcName             : pointer to task name string.
 - \b uxStackDepth       : stack depth.
 - \b pvParameters       : pointer to parameter(s) passed to task funtion.
 - \b uxPriority         : task priority.
 - \b uxCoreAffinityMask : task affinity mask
 - \b pxCreatedTask      : pointer to where the created task handle is stored.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskCreateAffinitySet_Return (uint32_t xReturn) 
\details
The event \b xTaskCreateAffinitySet_Return is generated before function xTaskCreateAffinitySet returns.

\b Value in the Event Recorder shows:
 - \b xReturn : return status. 
*/

/**
\fn void EvrFreeRTOSTasks_vTaskDelete (void *xTaskToDelete)
\details
The event \b vTaskDelete is generated when function vTaskDelete is called.

\b Value in the Event Recorder shows:
 - \b xTaskToDelete : handle to the task to delete
*/

/**
\fn void EvrFreeRTOSTasks_vTaskDelete_Return (void)
\details
The event \b vTaskDelete_Return is generated before function vTaskDelete returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_xTaskDelayUntil (uint32_t *pxPreviousWakeTime, const uint32_t xTimeIncrement) 
\details
The event \b xTaskDelayUntil is generated when function xTaskDelayUntil is called.

\b Value in the Event Recorder shows:
 - \b pxPreviousWakeTime : pointer to variable that holds the task last unblock time.
 - \b xTimeIncrement     : the cycle time period.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskDelayUntil_Return (uint32_t xShouldDelay)
\details
The event \b xTaskDelayUntil_Return is generated before function xTaskDelayUntil returns.

\b Value in the Event Recorder shows:
 - \b xShouldDelay : return status.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskDelay (const uint32_t xTicksToDelay) 
\details
The event \b vTaskDelay is generated when function vTaskDelay is called.

\b Value in the Event Recorder shows:
 - \b xTicksToDelay : the number of ticks that the calling task should block.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskDelay_Return (void) 
\details
The event \b vTaskDelay_Return is generated before function vTaskDelay returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_eTaskGetState (TaskHandle_t xTask)
\details
The event \b eTaskGetState is generated when function eTaskGetState is called.

\b Value in the Event Recorder shows:
 - \b xTask : handle to the task
*/

/**
\fn void EvrFreeRTOSTasks_eTaskGetState_Return (eTaskState eReturn)
\details
The event \b eTaskGetState_Return is generated before function eTaskGetState returns.

\b Value in the Event Recorder shows:
 - \b eReturn : returned task state
*/

/**
\fn void EvrFreeRTOSTasks_uxTaskPriorityGet (TaskHandle_t xTask)
\details
The event \b uxTaskPriorityGet is generated when function uxTaskPriorityGet is called.

\b Value in the Event Recorder shows:
 - \b xTask : task handle.
*/

/**
\fn void EvrFreeRTOSTasks_uxTaskPriorityGet_Return (uint32_t uxReturn)
\details
The event \b uxTaskPriorityGet_Return is generated before function uxTaskPriorityGet returns.

\b Value in the Event Recorder shows:
 - \b uxReturn : task priority.
*/

/**
\fn void EvrFreeRTOSTasks_uxTaskPriorityGetFromISR (TaskHandle_t xTask)
\details
The event \b uxTaskPriorityGetFromISR is generated when function uxTaskPriorityGetFromISR is called.

\b Value in the Event Recorder shows:
 - \b xTask : task handle.
*/

/**
\fn void EvrFreeRTOSTasks_uxTaskPriorityGetFromISR_Return (uint32_t uxReturn)
\details
The event \b uxTaskPriorityGetFromISR_Return is generated before function uxTaskPriorityGetFromISR returns.

\b Value in the Event Recorder shows:
 - \b uxReturn : task priority.
*/

/**
\fn void EvrFreeRTOSTasks_uxTaskBasePriorityGet (TaskHandle_t xTask)
\details
The event \b uxTaskBasePriorityGet is generated when function uxTaskBasePriorityGet is called.

\b Value in the Event Recorder shows:
 - \b xTask : task handle.
*/

/**
\fn void EvrFreeRTOSTasks_uxTaskBasePriorityGet_Return (uint32_t uxReturn)
\details
The event \b uxTaskBasePriorityGet_Return is generated before function uxTaskBasePriorityGet returns.

\b Value in the Event Recorder shows:
 - \b uxReturn : task priority.
*/

/**
\fn void EvrFreeRTOSTasks_uxTaskBasePriorityGetFromISR (TaskHandle_t xTask)
\details
The event \b uxTaskBasePriorityGetFromISR is generated when function uxTaskBasePriorityGetFromISR is called.

\b Value in the Event Recorder shows:
 - \b xTask : task handle.
*/

/**
\fn void EvrFreeRTOSTasks_uxTaskBasePriorityGetFromISR_Return (uint32_t uxReturn)
\details
The event \b uxTaskBasePriorityGetFromISR_Return is generated before function uxTaskBasePriorityGetFromISR returns.

\b Value in the Event Recorder shows:
 - \b uxReturn : task priority.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskPrioritySet (TaskHandle_t xTask, uint32_t uxNewPriority)
\details
The event \b vTaskPrioritySet is generated when function vTaskPrioritySet is called.

\b Value in the Event Recorder shows:
 - \b xTask         : task handle.
 - \b uxNewPriority : task priority to set.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskPrioritySet_Return (void)
\details
The event \b vTaskPrioritySet_Return is generated before function vTaskPrioritySet returns.

\b Value in the Event Recorder shows:
 - \b no value shown 
*/

/**
\fn void EvrFreeRTOSTasks_vTaskCoreAffinitySet (TaskHandle_t xTask, uint32_t uxCoreAffinityMask)
\details
The event \b vTaskCoreAffinitySet is generated when function vTaskCoreAffinitySet is called.

\b Value in the Event Recorder shows:
 - \b xTask              : task handle.
 - \b uxCoreAffinityMask : core affinity to set.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskCoreAffinitySet_Return (void)
\details
The event \b vTaskCoreAffinitySet_Return is generated before function vTaskCoreAffinitySet returns.

\b Value in the Event Recorder shows:
 - \b no value shown 
*/

/**
\fn void EvrFreeRTOSTasks_vTaskCoreAffinityGet (ConstTaskHandle_t xTask) 
\details
The event \b vTaskCoreAffinityGet is generated when function vTaskCoreAffinityGet is called.

\b Value in the Event Recorder shows:
 - \b xTask : task handle.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskCoreAffinityGet_Return (uint32_t uxCoreAffinityMask)
\details
The event \b vTaskCoreAffinityGet_Return is generated before function vTaskCoreAffinityGet returns.

\b Value in the Event Recorder shows:
- \b uxCoreAffinityMask : core affinity of a task.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskPreemptionDisable (TaskHandle_t xTask) 
\details
The event \b vTaskPreemptionDisable is generated when function vTaskPreemptionDisable is called.

\b Value in the Event Recorder shows:
 - \b xTask : task handle.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskPreemptionDisable_Return (void)
\details
The event \b vTaskPreemptionDisable_Return is generated before function vTaskPreemptionDisable returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskPreemptionEnable (TaskHandle_t xTask) 
\details
The event \b vTaskPreemptionEnable is generated when function vTaskPreemptionEnable is called.

\b Value in the Event Recorder shows:
 - \b xTask : task handle.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskPreemptionEnable_Return (void)
\details
The event \b vTaskPreemptionEnable_Return is generated before function vTaskPreemptionEnable returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskSuspend (TaskHandle_t xTaskToSuspend) 
\details
The event \b vTaskSuspend is generated when function vTaskSuspend is called.

\b Value in the Event Recorder shows:
 - \b xTaskToSuspend : task handle.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskSuspend_Return (void)
\details
The event \b vTaskSuspend_Return is generated before function vTaskSuspend returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskResume (TaskHandle_t xTaskToResume)
\details
The event \b vTaskResume is generated when function vTaskResume is called.

\b Value in the Event Recorder shows:
 - \b xTaskToResume : task handle.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskResume_Return (void)
\details
The event \b vTaskResume_Return is generated before function vTaskResume returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_xTaskResumeFromISR (TaskHandle_t xTaskToResume)
\details
The event \b xTaskResumeFromISR is generated when function xTaskResumeFromISR is called.

\b Value in the Event Recorder shows:
 - \b xTaskToResume : task handle.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskResumeFromISR_Return (uint32_t xYieldRequired) 
\details
The event \b xTaskResumeFromISR_Return is generated before function xTaskResumeFromISR returns.

\b Value in the Event Recorder shows:
 - \b xYieldRequired : info if resuming a task results in a context switch
*/

/**
\fn void EvrFreeRTOSTasks_vTaskStartScheduler (void)
\details
The event \b vTaskStartScheduler is generated when function vTaskStartScheduler is called.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskStartScheduler_Return (void) 
\details
The event \b vTaskStartScheduler_Return is generated before function vTaskStartScheduler returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskEndScheduler (void)
\details
The event \b vTaskEndScheduler is generated when function vTaskEndScheduler is called.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskEndScheduler_Return (void)
\details
The event \b vTaskEndScheduler_Return is generated before function vTaskEndScheduler returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskSuspendAll (void)
\details
The event \b vTaskSuspendAll is generated when function vTaskSuspendAll is called.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskSuspendAll_Return (void)
\details
The event \b vTaskSuspendAll_Return is generated before function vTaskSuspendAll returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_xTaskResumeAll (void)
\details
The event \b xTaskResumeAll is generated when function xTaskResumeAll is called.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_xTaskResumeAll_Return (uint32_t xAlreadyYielded) 
\details
The event \b xTaskResumeAll_Return is generated before function xTaskResumeAll returns.

\b Value in the Event Recorder shows:
 - \b xAlreadyYielded : info if resuming the scheduler caused a context switch.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGetTickCount (void) 
\details
The event \b xTaskGetTickCount is generated when function xTaskGetTickCount is called.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGetTickCount_Return (uint32_t xTicks)
\details
The event \b xTaskGetTickCount_Return is generated before function xTaskGetTickCount returns.

\b Value in the Event Recorder shows:
 - \b xTicks : count of ticks since scheduler was called.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGetTickCountFromISR (void) 
\details
The event \b xTaskGetTickCountFromISR is generated when function xTaskGetTickCountFromISR is called.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGetTickCountFromISR_Return (uint32_t xTicks)
\details
The event \b xTaskGetTickCountFromISR_Return is generated before function xTaskGetTickCountFromISR returns.

\b Value in the Event Recorder shows:
 - \b xTicks : count of ticks since scheduler was called.
*/

/**
\fn void EvrFreeRTOSTasks_uxTaskGetNumberOfTasks (void)
\details
The event \b uxTaskGetNumberOfTasks is generated when function uxTaskGetNumberOfTasks is called.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_uxTaskGetNumberOfTasks_Return (uint32_t uxCurrentNumberOfTasks)
\details
The event \b uxTaskGetNumberOfTasks_Return is generated before function uxTaskGetNumberOfTasks returns.

\b Value in the Event Recorder shows:
 - \b uxCurrentNumberOfTasks : current number of tasks. 
*/

/**
\fn void EvrFreeRTOSTasks_pcTaskGetName (TaskHandle_t xTaskToQuery)
\details
The event \b pcTaskGetName is generated when function pcTaskGetName is called.

\b Value in the Event Recorder shows:
 - \b xTaskToQuery : task handle. 
*/

/**
\fn void EvrFreeRTOSTasks_pcTaskGetName_Return (char *pcTaskName)
\details
The event \b pcTaskGetName_Return is generated before function pcTaskGetName returns.

\b Value in the Event Recorder shows:
 - \b pcTaskName : task name.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGetHandle (const char *pcNameToQuery)
\details
The event \b xTaskGetHandle is generated when function xTaskGetHandle is called.

\b Value in the Event Recorder shows:
 - \b pcNameToQuery : task name. 
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGetHandle_Return (void *pxTCB)
\details
The event \b xTaskGetHandle_Return is generated before function xTaskGetHandle returns.

\b Value in the Event Recorder shows:
 - \b pxTCB : pointer to task task handle. 
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGetStaticBuffers (TaskHandle_t xTask, StackType_t **ppuxStackBuffer, StaticTask_t **ppxTaskBuffer)
\details
The event \b xTaskGetStaticBuffers is generated when function xTaskGetStaticBuffers is called.

\b Value in the Event Recorder shows:
 - \b xTask           : task handle.
 - \b ppuxStackBuffer : pointer to location where pointer to task stack buffer is stored.
 - \b ppxTaskBuffer   : pointer to location where pointer to task data structure is stored.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGetStaticBuffers_Return (uint32_t xReturn) 
\details
The event \b xTaskGetStaticBuffers_Return is generated before function xTaskGetStaticBuffers returns.

\b Value in the Event Recorder shows:
 - \b xReturn : return status.
*/

/**
\fn void EvrFreeRTOSTasks_uxTaskGetSystemState (TaskStatus_t *pxTaskStatusArray, const uint32_t uxArraySize, uint32_t *pulTotalRunTime)
\details
The event \b uxTaskGetSystemState is generated before function uxTaskGetSystemState returns.

\b Value in the Event Recorder shows:
 - \b pxTaskStatusArray : pointer to an array of TaskStatus_t structures.
 - \b uxArraySize       : array size.
 - \b pulTotalRunTime   : total run time since the target booted. 
*/

/**
\fn void EvrFreeRTOSTasks_uxTaskGetSystemState_Return (uint32_t uxTask)
\details
The event \b uxTaskGetSystemState_Return is generated when function uxTaskGetSystemState is called.

\b Value in the Event Recorder shows:
 - \b uxTask : the number of TaskStatus_t structures populated. 
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGetIdleTaskHandle (void) 
\details
The event \b xTaskGetIdleTaskHandle is generated when function xTaskGetIdleTaskHandle is called.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGetIdleTaskHandle_Return (TaskHandle_t xTask) 
\details
The event \b xTaskGetIdleTaskHandle_Return is generated before function xTaskGetIdleTaskHandle returns.

\b Value in the Event Recorder shows:
 - \b xTask : task handle. 
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGetIdleTaskHandleForCore (uint32_t xCoreID)
\details
The event \b xTaskGetIdleTaskHandleForCore is generated when function xTaskGetIdleTaskHandleForCore is called.

\b Value in the Event Recorder shows:
 - \b xCoreID : core id.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGetIdleTaskHandleForCore_Return (TaskHandle_t xTask)
\details
The event \b xTaskGetIdleTaskHandleForCore_Return is generated before function xTaskGetIdleTaskHandleForCore returns.

\b Value in the Event Recorder shows:
 - \b xTask : task handle.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskStepTick (uint32_t xTicksToJump) 
\details
The event \b vTaskStepTick is generated when function vTaskStepTick is called.

\b Value in the Event Recorder shows:
 - \b xTicksToJump : number of ticks to add to the tick count.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskStepTick_Return (void)
\details
The event \b vTaskStepTick_Return is generated before function vTaskStepTick returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_xTaskCatchUpTicks (uint32_t xTicksToCatchUp) 
\details
The event \b xTaskCatchUpTicks is generated when function xTaskCatchUpTicks is called.

\b Value in the Event Recorder shows:
 - \b xTicksToCatchUp : number of tick interrupts that have been missed. 
*/

/**
\fn void EvrFreeRTOSTasks_xTaskCatchUpTicks_Return (uint32_t xYieldOccurred) 
\details
The event \b xTaskCatchUpTicks_Return is generated before function xTaskCatchUpTicks returns.

\b Value in the Event Recorder shows:
 - \b xYieldOccurred : info if any task was unblocked. 
*/

/**
\fn void EvrFreeRTOSTasks_xTaskAbortDelay (TaskHandle_t xTask)
\details
The event \b xTaskAbortDelay is generated when function xTaskAbortDelay is called.

\b Value in the Event Recorder shows:
 - \b xTask : task handle. 
*/

/**
\fn void EvrFreeRTOSTasks_xTaskAbortDelay_Return (uint32_t xReturn)
\details
The event \b xTaskAbortDelay_Return is generated before function xTaskAbortDelay returns.

\b Value in the Event Recorder shows:
 - \b xReturn : execution status. 
*/

/**
\fn void EvrFreeRTOSTasks_xTaskIncrementTick (void)
\details
The event \b xTaskIncrementTick is generated when function xTaskIncrementTick is called.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_xTaskIncrementTick_Return (uint32_t xSwitchRequired)
\details
The event \b xTaskIncrementTick_Return is generated before function xTaskIncrementTick returns.

\b Value in the Event Recorder shows:
 - \b xSwitchRequired : info if task switch is required. 
*/

/**
\fn void EvrFreeRTOSTasks_vTaskSetApplicationTaskTag (TaskHandle_t xTask, TaskHookFunction_t pxHookFunction)
\details
The event \b vTaskSetApplicationTaskTag is generated when function vTaskSetApplicationTaskTag is called.

\b Value in the Event Recorder shows:
 - \b xTask          : task handle. 
 - \b pxHookFunction : hook function used by the task xTask.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskSetApplicationTaskTag_Return (void)
\details
The event \b vTaskSetApplicationTaskTag_Return is generated before function vTaskSetApplicationTaskTag returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGetApplicationTaskTag (TaskHandle_t xTask) 
\details
The event \b xTaskGetApplicationTaskTag is generated when function xTaskGetApplicationTaskTag is called.

\b Value in the Event Recorder shows:
 - \b xTask : task handle. 
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGetApplicationTaskTag_Return (TaskHookFunction_t xReturn) 
\details
The event \b xTaskGetApplicationTaskTag_Return is generated before function xTaskGetApplicationTaskTag returns.

\b Value in the Event Recorder shows:
 - \b xReturn : hook function used by the task xTask.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGetApplicationTaskTagFromISR (TaskHandle_t xTask)
\details
The event \b xTaskGetApplicationTaskTagFromISR is generated when function xTaskGetApplicationTaskTagFromISR is called.

\b Value in the Event Recorder shows:
 - \b xTask : task handle. 
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGetApplicationTaskTagFromISR_Return (TaskHookFunction_t xReturn)
\details
The event \b xTaskGetApplicationTaskTagFromISR_Return is generated before function xTaskGetApplicationTaskTagFromISR returns.

\b Value in the Event Recorder shows:
 - \b xReturn : hook function used by the task xTask.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskCallApplicationTaskHook (TaskHandle_t xTask, void *pvParameter) 
\details
The event \b xTaskCallApplicationTaskHook is generated when function xTaskCallApplicationTaskHook is called.

\b Value in the Event Recorder shows:
 - \b xTask       : task handle.
 - \b pvParameter : pointer to parameters passed to the hook function
*/

/**
\fn void EvrFreeRTOSTasks_xTaskCallApplicationTaskHook_Return (uint32_t xReturn)
\details
The event \b xTaskCallApplicationTaskHook_Return is generated before function xTaskCallApplicationTaskHook returns.

\b Value in the Event Recorder shows:
 - \b xReturn : hook function execution status. 
*/

/**
\fn void EvrFreeRTOSTasks_vTaskSwitchContext (void) 
\details
The event \b vTaskSwitchContext is generated before function vTaskSwitchContext returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskSwitchContext_Return (void)
\details
The event \b vTaskSwitchContext_Return is generated when function vTaskSwitchContext is called.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskPlaceOnEventList (List_t *pxEventList, const TickType_t xTicksToWait)
\details
The event \b vTaskPlaceOnEventList is generated when function vTaskPlaceOnEventList is called.

\b Value in the Event Recorder shows:
 - \b pxEventList  : pointer to the blocked task list waiting for event.
 - \b xTicksToWait : amount of time to wait for an event.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskPlaceOnEventList_Return (void)
\details
The event \b vTaskPlaceOnEventList_Return is generated before function vTaskPlaceOnEventList returns.

\b Value in the Event Recorder shows:
  - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskPlaceOnUnorderedEventList (List_t *pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait)
\details
The event \b vTaskPlaceOnUnorderedEventList is generated when function vTaskPlaceOnUnorderedEventList is called.

\b Value in the Event Recorder shows:
 - \b pxEventList  : pointer to the blocked task list waiting for event.
 - \b xItemValue   : value to use when event list is not ordered by priority.
 - \b xTicksToWait : amount of time to wait for an event.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskPlaceOnUnorderedEventList_Return (void)
\details
The event \b vTaskPlaceOnUnorderedEventList is generated before function vTaskPlaceOnUnorderedEventList returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskPlaceOnEventListRestricted (List_t *pxEventList, TickType_t xTicksToWait, const uint32_t xWaitIndefinitely)
\details
The event \b vTaskPlaceOnEventListRestricted is generated when function vTaskPlaceOnEventListRestricted is called.

\b Value in the Event Recorder shows:
 - \b pxEventList       : pointer to the blocked task list waiting for event.
 - \b xTicksToWait      : amount of time to wait for an event.
 - \b xWaitIndefinitely : whether the task should block indefinitely.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskPlaceOnEventListRestricted_Return (void)
\details
The event \b vTaskPlaceOnEventListRestricted_Return is generated before function vTaskPlaceOnEventListRestricted returns.

\b Value in the Event Recorder shows:
 - \b xReturn : execution status
*/

/**
\fn void EvrFreeRTOSTasks_vTaskRemoveFromUnorderedEventList (ListItem_t *pxEventListItem, const TickType_t xItemValue)
\details
The event \b vTaskRemoveFromUnorderedEventList is generated when function vTaskRemoveFromUnorderedEventList is called.

\b Value in the Event Recorder shows:
 - \b pxEventListItem : pointer to the event list.
 - \b xItemValue      : event list item value.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskRemoveFromUnorderedEventList_Return (void)
\details
The event \b vTaskRemoveFromUnorderedEventList_Return is generated before function vTaskRemoveFromUnorderedEventList returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskSetTimeOutState (TimeOut_t *pxTimeOut)
\details
The event \b vTaskSetTimeOutState is generated when function vTaskSetTimeOutState is called.

\b Value in the Event Recorder shows:
 - \b pxTimeOut : pointer to the timeout object.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskSetTimeOutState_Return (void)
\details
The event \b vTaskSetTimeOutState_Return is generated before function vTaskSetTimeOutState returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskInternalSetTimeOutState (TimeOut_t *pxTimeOut)
\details
The event \b vTaskSetTimeOutState is generated when function vTaskSetTimeOutState is called.

\b Value in the Event Recorder shows:
 - \b pxTimeOut : pointer to the timeout object.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskInternalSetTimeOutState_Return (void)
\details
The event \b vTaskSetTimeOutState_Return is generated before function vTaskSetTimeOutState returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_xTaskCheckForTimeOut (TimeOut_t *pxTimeOut, TickType_t *pxTicksToWait)
\details
The event \b xTaskCheckForTimeOut is generated when function xTaskCheckForTimeOut is called.

\b Value in the Event Recorder shows:
 - \b pxTimeOut     : pointer to the timeout object.
 - \b pxTicksToWait : pointer to object holding number of ticks to check for timeout.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskCheckForTimeOut_Return (uint32_t xReturn)
\details
The event \b xTaskCheckForTimeOut_Return is generated before function xTaskCheckForTimeOut returns.

\b Value in the Event Recorder shows:
 - \b xReturn : execution status.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskMissedYield (void)
\details
The event \b vTaskMissedYield is generated when function vTaskMissedYield is called.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskMissedYield_Return (void)
\details
The event \b vTaskMissedYield_Return is generated before function vTaskMissedYield returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_uxTaskGetTaskNumber (TaskHandle_t xTask)
\details
The event \b uxTaskGetTaskNumber is generated when function uxTaskGetTaskNumber is called.

\b Value in the Event Recorder shows:
 - \b xTask : task handle.
*/

/**
\fn void EvrFreeRTOSTasks_uxTaskGetTaskNumber_Return (uint32_t uxReturn)
\details
The event \b uxTaskGetTaskNumber_Return is generated before function uxTaskGetTaskNumber returns.

\b Value in the Event Recorder shows:
 - \b uxReturn : number assigned to the task
*/

/**
\fn void EvrFreeRTOSTasks_vTaskSetTaskNumber (TaskHandle_t xTask, const uint32_t uxHandle)
\details
The event \b vTaskSetTaskNumber is generated when function vTaskSetTaskNumber is called.

\b Value in the Event Recorder shows:
 - \b xTask    : task handle.
 - \b uxHandle : the number to assign to the task.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskSetTaskNumber_Return (void)
\details
The event \b vTaskSetTaskNumber_Return is generated before function vTaskSetTaskNumber returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_eTaskConfirmSleepModeStatus (void)
\details
The event \b eTaskConfirmSleepModeStatus is generated when function eTaskConfirmSleepModeStatus is called.

\b Value in the Event Recorder shows:
 - \b no value shown 
*/

/**
\fn void EvrFreeRTOSTasks_eTaskConfirmSleepModeStatus_Return (eSleepModeStatus eReturn)
\details
The event \b eTaskConfirmSleepModeStatus_Return is generated before function eTaskConfirmSleepModeStatus returns.

\b Value in the Event Recorder shows:
 - \b eReturn : sleep mode status. 
*/

/**
\fn void EvrFreeRTOSTasks_vTaskSetThreadLocalStoragePointer (TaskHandle_t xTaskToSet, uint32_t xIndex, void * pvValue)
\details
The event \b vTaskSetThreadLocalStoragePointer is generated when function vTaskSetThreadLocalStoragePointer is called.

\b Value in the Event Recorder shows:
 - \b xTaskToSet : task handle.
 - \b xIndex     : array index.
 - \b pvValue    : value to set.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskSetThreadLocalStoragePointer_Return (void)
\details
The event \b vTaskSetThreadLocalStoragePointer_Return is generated before function vTaskSetThreadLocalStoragePointer returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_pvTaskGetThreadLocalStoragePointer (TaskHandle_t xTaskToQuery, uint32_t xIndex)
\details
The event \b pvTaskGetThreadLocalStoragePointer is generated when function pvTaskGetThreadLocalStoragePointer is called.

\b Value in the Event Recorder shows:
 - \b xTaskToQuery : task handle.
 - \b xIndex       : array index.
*/

/**
\fn void EvrFreeRTOSTasks_pvTaskGetThreadLocalStoragePointer_Return (void *pvReturn)
\details
The event \b pvTaskGetThreadLocalStoragePointer_Return is generated before function pvTaskGetThreadLocalStoragePointer returns.

\b Value in the Event Recorder shows:
 - \b pvReturn    : retrieved value. 
*/

/**
\fn void EvrFreeRTOSTasks_vTaskAllocateMPURegions (TaskHandle_t xTaskToModify, const MemoryRegion_t *pxRegions)
\details
The event \b vTaskAllocateMPURegions is generated when function vTaskAllocateMPURegions is called.

\b Value in the Event Recorder shows:
 - \b xTaskToModify : task handle.
 - \b pxRegions     : pointer to a structure that contains memory region definitions.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskAllocateMPURegions_Return (void)
\details
The event \b vTaskAllocateMPURegions_Return is generated before function vTaskAllocateMPURegions returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskGetInfo (TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, uint32_t xGetFreeStackSpace, eTaskState eState)
\details
The event \b vTaskGetInfo is generated when function vTaskGetInfo is called.

\b Value in the Event Recorder shows:
 - \b xTask              : task handle.
 - \b pxTaskStatus       : pointer to the structure that will be filled with info.
 - \b xGetFreeStackSpace : parameter that allows the high water mark checking to be skipped.
 - \b eState             : parameter that allows the state information to be omitted.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskGetInfo_Return (void)
\details
The event \b vTaskGetInfo_Return is generated before function vTaskGetInfo returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_uxTaskGetStackHighWaterMark2 (TaskHandle_t xTask)
\details
The event \b uxTaskGetStackHighWaterMark2 is generated when function uxTaskGetStackHighWaterMark2 is called.

\b Value in the Event Recorder shows:
 - \b xTask : task handle.
*/

/**
\fn void EvrFreeRTOSTasks_uxTaskGetStackHighWaterMark2_Return (uint32_t uxReturn)
\details
The event \b uxTaskGetStackHighWaterMark2_Return is generated before function uxTaskGetStackHighWaterMark2 returns.

\b Value in the Event Recorder shows:
 - \b uxReturn : the smallest amount (in words) of free stack space there has been.
*/

/**
\fn void EvrFreeRTOSTasks_uxTaskGetStackHighWaterMark (TaskHandle_t xTask)
\details
The event \b uxTaskGetStackHighWaterMark is generated when function uxTaskGetStackHighWaterMark is called.

\b Value in the Event Recorder shows:
 - \b xTask : task handle.
*/

/**
\fn void EvrFreeRTOSTasks_uxTaskGetStackHighWaterMark_Return (uint32_t uxReturn)
\details
The event \b uxTaskGetStackHighWaterMark_Return is generated before function uxTaskGetStackHighWaterMark returns.

\b Value in the Event Recorder shows:
 - \b uxReturn : the smallest amount (in words) of free stack space there has been.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGetCurrentTaskHandle (void) 
\details
The event \b xTaskGetCurrentTaskHandle is generated when function xTaskGetCurrentTaskHandle is called.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGetCurrentTaskHandle_Return (TaskHandle_t xReturn)
\details
The event \b xTaskGetCurrentTaskHandle_Return is generated before function xTaskGetCurrentTaskHandle returns.

\b Value in the Event Recorder shows:
 - \b xReturn : task handle.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGetCurrentTaskHandleForCore (uint32_t xCoreID)
\details
The event \b xTaskGetCurrentTaskHandleForCore is generated when function xTaskGetCurrentTaskHandleForCore is called.

\b Value in the Event Recorder shows:
 - \b xCoreID : processor core ID. 
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGetCurrentTaskHandleForCore_Return (TaskHandle_t xReturn)
\details
The event \b xTaskGetCurrentTaskHandleForCore_Return is generated before function xTaskGetCurrentTaskHandleForCore returns.

\b Value in the Event Recorder shows:
 - \b xReturn : task handle.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGetSchedulerState (void) 
\details
The event \b xTaskGetSchedulerState is generated when function xTaskGetSchedulerState is called.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGetSchedulerState_Return (uint32_t xReturn)
\details
The event \b xTaskGetSchedulerState_Return is generated before function xTaskGetSchedulerState returns.

\b Value in the Event Recorder shows:
 - \b xReturn : scheduler state.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskPriorityInherit (TaskHandle_t pxMutexHolder)
\details
The event \b xTaskPriorityInherit is generated when function xTaskPriorityInherit is called.

\b Value in the Event Recorder shows:
 - \b pxMutexHolder : task handle. 
*/

/**
\fn void EvrFreeRTOSTasks_xTaskPriorityInherit_Return (uint32_t xReturn)
\details
The event \b xTaskPriorityInherit_Return is generated before function xTaskPriorityInherit returns.

\b Value in the Event Recorder shows:
 - \b xReturn : execution status.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskPriorityDisinherit (TaskHandle_t pxMutexHolder)
\details
The event \b xTaskPriorityDisinherit is generated when function xTaskPriorityDisinherit is called.

\b Value in the Event Recorder shows:
 - \b pxMutexHolder : task handle. 
*/

/**
\fn void EvrFreeRTOSTasks_xTaskPriorityDisinherit_Return (uint32_t xReturn)
\details
The event \b xTaskPriorityDisinherit_Return is generated before function xTaskPriorityDisinherit returns.

\b Value in the Event Recorder shows:
 - \b xReturn : execution status.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskPriorityDisinheritAfterTimeout (TaskHandle_t pxMutexHolder, uint32_t uxHighestPriorityWaitingTask)
\details
The event \b vTaskPriorityDisinheritAfterTimeout is generated when function vTaskPriorityDisinheritAfterTimeout is called.

\b Value in the Event Recorder shows:
 - \b pxMutexHolder                : task handle.
 - \b uxHighestPriorityWaitingTask : the priority of the highest priority task that is waiting for mutex.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskPriorityDisinheritAfterTimeout_Return (void)
\details
The event \b vTaskPriorityDisinheritAfterTimeout_Return is generated before function vTaskPriorityDisinheritAfterTimeout returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskYieldWithinAPI (void)
\details
The event \b vTaskYieldWithinAPI is generated when function vTaskYieldWithinAPI is called.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskYieldWithinAPI_Return (void)
\details
The event \b vTaskYieldWithinAPI_Return is generated before function vTaskYieldWithinAPI returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskEnterCritical (void)
\details
The event \b vTaskEnterCritical is generated when function vTaskEnterCritical is called.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskEnterCritical_Return (void)
\details
The event \b vTaskEnterCritical_Return is generated before function vTaskEnterCritical returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskEnterCriticalFromISR (void)
\details
The event \b vTaskEnterCriticalFromISR is generated when function vTaskEnterCriticalFromISR is called.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskEnterCriticalFromISR_Return (uint32_t uxSavedInterruptStatus)
\details
The event \b vTaskEnterCriticalFromISR_Return is generated before function vTaskEnterCriticalFromISR returns.

\b Value in the Event Recorder shows:
 - \b uxSavedInterruptStatus : saved interrupt status.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskExitCritical (void) 
\details
The event \b vTaskExitCritical is generated when function vTaskExitCritical is called.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskExitCritical_Return (void)
\details
The event \b vTaskExitCritical_Return is generated before function vTaskExitCritical returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskExitCriticalFromISR (uint32_t uxSavedInterruptStatus)
\details
The event \b vTaskExitCriticalFromISR is generated when function vTaskExitCriticalFromISR is called.

\b Value in the Event Recorder shows:
 - \b uxSavedInterruptStatus : saved interrupt status.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskExitCriticalFromISR_Return (void)
\details
The event \b vTaskExitCriticalFromISR_Return is generated before function vTaskExitCriticalFromISR returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskListTasks (char *pcWriteBuffer, size_t uxBufferLength)
\details
The event \b vTaskListTasks is generated when function vTaskListTasks is called.

\b Value in the Event Recorder shows:
 - \b pcWriteBuffer  : pointer to buffer.
 - \b uxBufferLength : length of the pcWriteBuffer.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskListTasks_Return (void)
\details
The event \b vTaskListTasks_Return is generated before function vTaskListTasks returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_vTaskGetRunTimeStatistics (char *pcWriteBuffer, size_t uxBufferLength)
\details
The event \b vTaskGetRunTimeStatistics is generated when function vTaskGetRunTimeStatistics is called.

\b Value in the Event Recorder shows:
 - \b pcWriteBuffer  : pointer to buffer.
 - \b uxBufferLength : length of the pcWriteBuffer.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskGetRunTimeStatistics_Return (void)
\details
The event \b vTaskGetRunTimeStatistics_Return is generated before function vTaskGetRunTimeStatistics returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_uxTaskResetEventItemValue (void)
\details
The event \b uxTaskResetEventItemValue is generated when function uxTaskResetEventItemValue is called.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_uxTaskResetEventItemValue_Return (TickType_t uxReturn)
\details
The event \b uxTaskResetEventItemValue_Return is generated before function uxTaskResetEventItemValue returns.

\b Value in the Event Recorder shows:
 - \b uxReturn : event list item value.
*/

/**
\fn void EvrFreeRTOSTasks_pvTaskIncrementMutexHeldCount (void)
\details
The event \b pvTaskIncrementMutexHeldCount is generated when function pvTaskIncrementMutexHeldCount is called.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_pvTaskIncrementMutexHeldCount_Return (void *pxTCB)
\details
The event \b pvTaskIncrementMutexHeldCount_Return is generated before function pvTaskIncrementMutexHeldCount returns.

\b Value in the Event Recorder shows:
 - \b pxTCB : running task handle
*/

/**
\fn void EvrFreeRTOSTasks_ulTaskGenericNotifyTake (UBaseType_t uxIndexToWaitOn, BaseType_t xClearCountOnExit, TickType_t xTicksToWait)
\details
The event \b ulTaskGenericNotifyTake is generated when function ulTaskGenericNotifyTake is called.

\b Value in the Event Recorder shows:
 - \b uxIndexToWaitOn    index within the tasks array of notification values.
 - \b xClearCountOnExit  indication whether to clear notification value.
 - \b xTicksToWait       amount of time to wait.
*/

/**
\fn void EvrFreeRTOSTasks_ulTaskGenericNotifyTake_Return (uint32_t ulReturn)
\details
The event \b ulTaskGenericNotifyTake_Return is generated before function ulTaskGenericNotifyTake returns.

\b Value in the Event Recorder shows:
 - \b ulReturn : task notification value before modification.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGenericNotifyWait (UBaseType_t uxIndexToWaitOn,
                                              uint32_t    ulBitsToClearOnEntry,
                                              uint32_t    ulBitsToClearOnExit,
                                              uint32_t   *pulNotificationValue,
                                              TickType_t  xTicksToWait)
\details
The event \b xTaskGenericNotifyWait is generated when function xTaskGenericNotifyWait is called.

\b Value in the Event Recorder shows:
 - \b uxIndexToWaitOn      : index within the tasks array of notification values.
 - \b ulBitsToClearOnEntry : bits that shall be cleared before reading notification value.
 - \b ulBitsToClearOnExit  : bits that shall be cleared before returning.
 - \b pulNotificationValue : pointer to variable where notification value will be stored.
 - \b xTicksToWait         : amount of time to wait.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGenericNotifyWait_Return (BaseType_t xReturn)
\details
The event \b xTaskGenericNotifyWait_Return is generated before function xTaskGenericNotifyWait returns.

\b Value in the Event Recorder shows:
 - \b xReturn : notification receive status.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGenericNotify (TaskHandle_t  xTaskToNotify,
                                          UBaseType_t   uxIndexToNotify,
                                          uint32_t      ulValue,
                                          eNotifyAction eAction,
                                          uint32_t     *pulPreviousNotificationValue)
\details
The event \b xTaskGenericNotify is generated when function xTaskGenericNotify is called.

\b Value in the Event Recorder shows:
 - \b xTaskToNotify                : task handle.
 - \b uxIndexToNotify              : index within the tasks array of notification values.
 - \b ulValue                      : notification data value.
 - \b eAction                      : specifies how is the task notification value updated.
 - \b pulPreviousNotificationValue : pointer to variable where notification value will be stored.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGenericNotify_Return (BaseType_t xReturn)
\details
The event \b xTaskGenericNotify_Return is generated before function xTaskGenericNotify returns.

\b Value in the Event Recorder shows:
 - \b xReturn : context dependent return value.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGenericNotifyFromISR (TaskHandle_t  xTaskToNotify,
                                                 UBaseType_t   uxIndexToNotify,
                                                 uint32_t      ulValue,
                                                 eNotifyAction eAction,
                                                 uint32_t     *pulPreviousNotificationValue,
                                                 BaseType_t   *pxHigherPriorityTaskWoken)
\details
The event \b xTaskGenericNotifyFromISR is generated when function xTaskGenericNotifyFromISR is called.

\b Value in the Event Recorder shows:
 - \b xTaskToNotify                : task handle.
 - \b uxIndexToNotify              : index within the tasks array of notification values.
 - \b ulValue                      : notification data value.
 - \b eAction                      : specifies how is the task notification value updated.
 - \b pulPreviousNotificationValue : pointer to variable where notification value will be stored.
 - \b pxHigherPriorityTaskWoken    : pointer to variable where information if any task was woken will be stored.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGenericNotifyFromISR_Return (BaseType_t xReturn)
\details
The event \b xTaskGenericNotifyFromISR_Return is generated before function xTaskGenericNotifyFromISR returns.

\b Value in the Event Recorder shows:
 - \b xReturn : context dependent return value.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskGenericNotifyGiveFromISR (TaskHandle_t xTaskToNotify, UBaseType_t uxIndexToNotify, BaseType_t *pxHigherPriorityTaskWoken)
\details
The event \b vTaskGenericNotifyGiveFromISR is generated when function vTaskGenericNotifyGiveFromISR is called.

\b Value in the Event Recorder shows:
 - \b xTaskToNotify             : task handle.
 - \b uxIndexToNotify           : index within the tasks array of notification values.
 - \b pxHigherPriorityTaskWoken : pointer to variable where information if any task was woken will be stored.
*/

/**
\fn void EvrFreeRTOSTasks_vTaskGenericNotifyGiveFromISR_Return (void)
\details
The event \b vTaskGenericNotifyGiveFromISR_Return is generated before function vTaskGenericNotifyGiveFromISR returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGenericNotifyStateClear (TaskHandle_t xTask, UBaseType_t uxIndexToClear) 
\details
The event \b xTaskGenericNotifyStateClear is generated when function xTaskGenericNotifyStateClear is called.

\b Value in the Event Recorder shows:
 - \b xTask          : task handle.
 - \b uxIndexToClear : index within the tasks array of notification values.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGenericNotifyStateClear_Return (BaseType_t xReturn)
\details
The event \b xTaskGenericNotifyStateClear_Return is generated before function xTaskGenericNotifyStateClear returns.

\b Value in the Event Recorder shows:
 - \b xReturn : execution status.
*/

/**
\fn void EvrFreeRTOSTasks_ulTaskGenericNotifyValueClear (TaskHandle_t xTask, UBaseType_t uxIndexToClear, uint32_t ulBitsToClear)
\details
The event \b ulTaskGenericNotifyValueClear is generated when function ulTaskGenericNotifyValueClear is called.

\b Value in the Event Recorder shows:
 - \b xTask          : task handle.
 - \b uxIndexToClear : index within the tasks array of notification values.
 - \b ulBitsToClear  : bits to clear in notification value.
*/

/**
\fn void EvrFreeRTOSTasks_ulTaskGenericNotifyValueClear_Return (uint32_t ulReturn)
\details
The event \b ulTaskGenericNotifyValueClear_Return is generated before function ulTaskGenericNotifyValueClear returns.

\b Value in the Event Recorder shows:
 - \b ulReturn : notification value before clearing.
*/

/**
\fn void EvrFreeRTOSTasks_ulTaskGetRunTimeCounter (const TaskHandle_t xTask)
\details
The event \b ulTaskGetRunTimeCounter is generated when function ulTaskGetRunTimeCounter is called.

\b Value in the Event Recorder shows:
 - \b xTask : task handle. 
*/

/**
\fn void EvrFreeRTOSTasks_ulTaskGetRunTimeCounter_Return (uint32_t ulRunTimeCounter)
\details
The event \b ulTaskGetRunTimeCounter_Return is generated before function ulTaskGetRunTimeCounter returns.

\b Value in the Event Recorder shows:
 - \b ulRunTimeCounter : total run time of the given task.
*/

/**
\fn void EvrFreeRTOSTasks_ulTaskGetRunTimePercent (const TaskHandle_t xTask)
\details
The event \b ulTaskGetRunTimePercent is generated when function ulTaskGetRunTimePercent is called.

\b Value in the Event Recorder shows:
 - \b xTask : task handle. 
*/

/**
\fn void EvrFreeRTOSTasks_ulTaskGetRunTimePercent_Return (uint32_t ulReturn) 
\details
The event \b ulTaskGetRunTimePercent_Return is generated before function ulTaskGetRunTimePercent returns.

\b Value in the Event Recorder shows:
 - \b ulReturn : the percentage of the total run time consumed by the given task.
*/

/**
\fn void EvrFreeRTOSTasks_ulTaskGetIdleRunTimeCounter (void)
\details
The event \b ulTaskGetIdleRunTimeCounter is generated when function ulTaskGetIdleRunTimeCounter is called.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_ulTaskGetIdleRunTimeCounter_Return (uint32_t ulReturn)
\details
The event \b ulTaskGetIdleRunTimeCounter_Return is generated before function ulTaskGetIdleRunTimeCounter returns.

\b Value in the Event Recorder shows:
 - \b ulReturn : total run time of the idle task.
*/

/**
\fn void EvrFreeRTOSTasks_ulTaskGetIdleRunTimePercent (void) 
\details
The event \b ulTaskGetIdleRunTimePercent is generated when function ulTaskGetIdleRunTimePercent is called.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTasks_ulTaskGetIdleRunTimePercent_Return (uint32_t ulReturn)
\details
The event \b ulTaskGetIdleRunTimePercent_Return is generated before function ulTaskGetIdleRunTimePercent returns.

\b Value in the Event Recorder shows:
 - \b ulReturn : the percentage of the total run time consumed by the idle task.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGetMPUSettings (TaskHandle_t xTask)
\details
The event \b xTaskGetMPUSettings is generated when function xTaskGetMPUSettings is called.

\b Value in the Event Recorder shows:
 - \b xTask : task handle.
*/

/**
\fn void EvrFreeRTOSTasks_xTaskGetMPUSettings_Return (void *xMPUSettings)
\details
The event \b xTaskGetMPUSettings_Return is generated before function xTaskGetMPUSettings returns.

\b Value in the Event Recorder shows:
 - \b xMPUSettings :  pointer to MPU settings associated with a task.
*/

/**
@}
*/


/**
\defgroup freertos_evr_queue Message Queue Functions
\brief Events generated by message queue functions 
\details
@{
*/

/**
\fn void EvrFreeRTOSQueue_QueueCreate (Queue_t pxQueue)
\details
The event \b QueueCreate is generated when queue object is successfully created.

\b Value in the Event Recorder shows:
 - \b pxQueue : pointer to queue object handle (control block address). 
*/

/**
\fn void EvrFreeRTOSQueue_QueueCreateFailed (uint32_t ucQueueType)
\details
The event \b QueueCreateFailed is generated when queue object create fails due to insufficient heap memory.

\b Value in the Event Recorder shows:
 - \b ucQueueType : x
*/

/**
\fn void EvrFreeRTOSQueue_CreateMutex (Queue_t pxNewQueue)
\details
The event \b CreateMutex is generated when mutex object is successfully created.

\b Value in the Event Recorder shows:
 - \b pxNewQueue : pointer to mutex (queue) object handle (control block address).
*/

/**
\fn void EvrFreeRTOSQueue_CreateMutexFailed (void)
\details
The event \b CreateMutexFailed is generated when mutex object create fails due to insufficient heap memory.
*/

/**
\fn void EvrFreeRTOSQueue_GiveMutexRecursive (Queue_t pxMutex)
\details
The event \b GiveMutexRecursive is generated when mutex give operation is successfully executed.

\b Value in the Event Recorder shows:
 - \b pxMutex : pointer to mutex (queue) object handle (control block address).
*/

/**
\fn void EvrFreeRTOSQueue_GiveMutexRecursiveFailed (Queue_t pxMutex)
\details
The event \b GiveMutexRecursiveFailed is generated when recursive mutex give operation was not successful.

\b Value in the Event Recorder shows:
 - \b pxMutex : pointer to mutex (queue) object handle (control block address).
*/

/**
\fn void EvrFreeRTOSQueue_TakeMutexRecursive (Queue_t pxMutex)
\details
The event \b TakeMutexRecursive is generated when recursive mutex take operation is successfully executed.

\b Value in the Event Recorder shows:
 - \b pxMutex : pointer to mutex (queue) object handle (control block address).
*/

/**
\fn void EvrFreeRTOSQueue_TakeMutexRecursiveFailed (Queue_t pxMutex)
\details
The event \b TakeMutexRecursiveFailed is generated when recursive mutex take operation is not successful.

\b Value in the Event Recorder shows:
 - \b pxMutex : pointer to mutex (queue) object handle (control block address).
*/

/**
\fn void EvrFreeRTOSQueue_CreateCountingSemaphore (Queue_t xHandle)
\details
The event \b CreateCountingSemaphore is generated when counting semaphore object is successfully created.

\b Value in the Event Recorder shows:
 - \b xHandle : pointer to semaphore (queue) object handle (control block address).
*/

/**
\fn void EvrFreeRTOSQueue_CreateCountingSemaphoreFailed (void)
\details
The event \b CreateCountingSemaphoreFailed is generated when semaphore object create fails due to insufficient heap memory.
*/

/**
\fn void EvrFreeRTOSQueue_QueueSend (Queue_t pxQueue)
\details
The event \b QueueSend is generated when the queue send operation was successful.

\b Value in the Event Recorder shows:
 - \b pxQueue : pointer to queue object handle (control block address).
*/

/**
\fn void EvrFreeRTOSQueue_QueueSendFailed (Queue_t pxQueue)
\details
The event \b QueueSendFailed is generated when the queue send operation fails due to the queue being full.

\b Value in the Event Recorder shows:
 - \b pxQueue : pointer to queue object handle (control block address).
*/

/**
\fn void EvrFreeRTOSQueue_QueueReceive (Queue_t pxQueue)
\details
The event \b QueueReceive is generated when the queue receive operation was successful.

\b Value in the Event Recorder shows:
 - \b pxQueue : pointer to queue object handle (control block address).
*/

/**
\fn void EvrFreeRTOSQueue_QueuePeek (Queue_t pxQueue)
\details
The event \b QueuePeek is generated when the queue peek operation was successful.

\b Value in the Event Recorder shows:
 - \b pxQueue : pointer to queue object handle (control block address).
*/

/**
\fn void EvrFreeRTOSQueue_QueuePeekFromIsr (Queue_t pxQueue)
\details
The event \b QueuePeekFromIsr is generated when the queue peek from ISR operation was successful.

\b Value in the Event Recorder shows:
 - \b pxQueue : pointer to queue object handle (control block address).
*/

/**
\fn void EvrFreeRTOSQueue_QueueReceiveFailed (Queue_t pxQueue)
\details
The event \b QueueReceiveFailed is generated when the queue receive operation failed because the queue was empty.

\b Value in the Event Recorder shows:
 - \b pxQueue : pointer to queue object handle (control block address).
*/

/**
\fn void EvrFreeRTOSQueue_QueueSendFromIsr (Queue_t pxQueue)
\details
The event \b QueueSendFromIsr is generated when the queue send from ISR operation was successful.

\b Value in the Event Recorder shows:
 - \b pxQueue : pointer to queue object handle (control block address).
*/

/**
\fn void EvrFreeRTOSQueue_QueueSendFromIsrFailed (Queue_t pxQueue)
\details
The event \b QueueSendFromIsrFailed is generated when the queue send operation fails due to the queue already being full.

\b Value in the Event Recorder shows:
 - \b pxQueue : pointer to queue object handle (control block address).
*/

/**
\fn void EvrFreeRTOSQueue_QueueReceiveFromIsr (Queue_t pxQueue)
\details
The event \b QueueReceiveFromIsr is generated when the queue receive from ISR operation was successful.

\b Value in the Event Recorder shows:
 - \b pxQueue : pointer to queue object handle (control block address).
*/

/**
\fn void EvrFreeRTOSQueue_QueueReceiveFromIsrFailed (Queue_t pxQueue)
\details
The event \b QueueReceiveFromIsrFailed is generated when the queue receive operation fails due to the queue already being empty.

\b Value in the Event Recorder shows:
 - \b pxQueue : pointer to queue object handle (control block address).
*/

/**
\fn void EvrFreeRTOSQueue_QueuePeekFromIsrFailed (Queue_t pxQueue)
\details
The event \b QueuePeekFromIsrFailed is generated when queue peek operation is executed from an ISR and the queue is empty.

\b Value in the Event Recorder shows:
 - \b pxQueue : pointer to queue object handle (control block address).
*/

/**
\fn void EvrFreeRTOSQueue_QueueDelete (Queue_t pxQueue)
\details
The event \b QueueDelete is generated when the function vQueueDelete is called.

\b Value in the Event Recorder shows:
 - \b pxQueue : pointer to queue object handle (control block address).
*/

/**
\fn void EvrFreeRTOSQueue_QueueRegistryAdd (Queue_t pxQueue, const char *pcQueueName)
\details
The event \b QueueRegistryAdd is generated when a human readable name is registered to the specified queue.

\b Value in the Event Recorder shows:
 - \b pxQueue : pointer to queue object handle (control block address).
 - \b pcQueueName : pointer to the ASCII string.
*/

/**
\fn void EvrFreeRTOSQueue_BlockingOnQueueReceive (Queue_t pxQueue)
\details
The event \b BlockingOnQueueReceive is generated when the currently executing task is about to block following
an attempt to read from an empty queue, or an attempt to 'take' an empty semaphore or mutex.

\b Value in the Event Recorder shows:
 - \b pxQueue : pointer to queue object handle (control block address).
*/

/**
\fn void EvrFreeRTOSQueue_BlockingOnQueueSend (Queue_t pxQueue)
\details
The event \b BlockingOnQueueSend is generated when the currently executing task is about to block following
an attempt to write to a full queue.

\b Value in the Event Recorder shows:
 - \b pxQueue : pointer to queue object handle (control block address).
*/

/**
@}
*/


/**
\defgroup freertos_evr_timers Timer Functions
\brief Events generated by timer functions 
\details
@{
*/

/**
\fn void EvrFreeRTOSTimers_TimerCreate (Timer_t pxNewTimer) 
\details
The event \b TimerCreate is generated when timer object is successfully created.

\b Value in the Event Recorder shows:
 - \b pxNewTimer : pointer to timer object handle (control block address).
*/

/**
\fn void EvrFreeRTOSTimers_TimerCreateFailed (void) 
\details
The event \b TimerCreateFailed is generated when timer object create fails due to insufficient heap memory.
*/

/**
\fn void EvrFreeRTOSTimers_TimerCommandSend (Timer_t pxTimer, uint32_t xCommandID, uint32_t xOptionalValue, uint32_t xReturn) 
\details
The event \b TimerCommandSend is generated when a command is sent to the timer service task,

\b Value in the Event Recorder shows:
 - \b pxTimer : pointer to timer object handle (control block address).
 - \b xCommandID : timer command ID.
 - \b xOptionalValue : optional command value.
 - \b xReturn : execution status (0: failed, command was not sent to the timer command queue, 1: passed, command sent)
*/

/**
\fn void EvrFreeRTOSTimers_TimerCommandReceived (Timer_t pxTimer, uint32_t xCommandID, uint32_t xOptionalValue) 
\details
The event \b TimerCommandReceived is generated when the timer service task receives a command and before the command is actually processed.

\b Value in the Event Recorder shows:
 - \b pxTimer : pointer to timer object handle (control block address).
 - \b xCommandID : timer command ID.
 - \b xOptionalValue : optional command value.
*/

/**
\fn void EvrFreeRTOSTimers_TimerExpired (Timer_t pxTimer) 
\details
The event \b TimerExpired is generated when a software timer expires and before the timer callback is executed.

\b Value in the Event Recorder shows:
 - \b pxTimer : pointer to timer object handle (control block address).
*/

/**
\fn void EvrFreeRTOSTimers_PendFuncCall (PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, uint32_t xReturn)
\details
The event \b PendFuncCall is generated before the function xTimerPendFunctionCall returns.

\b Value in the Event Recorder shows:
 - \b xFunctionToPend : callback function to execute from the timer service/deamon task.
 - \b pvParameter1 : the value passed into the callback function as the first parameter.
 - \b ulParameter2 : the value passed into the callback function as the second parameter.
 - \b xReturn : execution status (1=callback passed to the timer sevice task, any other value: queue full, failed to register the callback execution)
*/

/**
\fn void EvrFreeRTOSTimers_PendFuncCallFromIsr (PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, uint32_t xReturn)
\details
The event \b PendFuncCallFromIsr is generated before the function xTimerPendFunctionCallFromISR returns.

\b Value in the Event Recorder shows:
 - \b xFunctionToPend : callback function to execute from the timer service/deamon task.
 - \b pvParameter1 : the value passed into the callback function as the first parameter.
 - \b ulParameter2 : the value passed into the callback function as the second parameter.
 - \b xReturn : execution status (1=callback passed to the timer sevice task, any other value: queue full, failed to register the callback execution)
*/

/**
\fn void EvrFreeRTOSTimers_xTimerCreateTimerTask (void)
\details
The event \b xTimerCreateTimerTask is generated when function xTimerCreateTimerTask is called.

\b Value in the Event Recorder shows:
 - \b no value shown 
*/

/**
\fn void EvrFreeRTOSTimers_xTimerCreateTimerTask_Return (BaseType_t xReturn)
\details
The event \b xTimerCreateTimerTask_Return is generated before the function xTimerCreateTimerTask returns.

\b Value in the Event Recorder shows:
 - \b xReturn : execution status.
*/

/**
\fn void EvrFreeRTOSTimers_xTimerCreate (const char *pcTimerName,
                                     const TickType_t xTimerPeriodInTicks,
                                     const BaseType_t xAutoReload,
                                     void *pvTimerID,
                                     TimerCallbackFunction_t pxCallbackFunction)
\details
The event \b xTimerCreate is generated when function xTimerCreate is called.

\b Value in the Event Recorder shows:
 - \b pcTimerName         : human readable timer name.
 - \b xTimerPeriodInTicks : the period of the timer in ticks.
 - \b xAutoReload         : auto reload flag.
 - \b pvTimerID           : identifier assigned to the timer being created.
 - \b pxCallbackFunction  : function to call when the timer expired.
*/

/**
\fn void EvrFreeRTOSTimers_xTimerCreate_Return (TimerHandle_t pxNewTimer)
\details
The event \b xTimerCreate_Return is generated before the function xTimerCreate returns.

\b Value in the Event Recorder shows:
 - \b pxNewTimer : Timer object handle.
*/

/**
\fn void EvrFreeRTOSTimers_xTimerCreateStatic (const char *pcTimerName,
                                          const TickType_t xTimerPeriodInTicks,
                                          const BaseType_t xAutoReload,
                                          void *pvTimerID,
                                          TimerCallbackFunction_t pxCallbackFunction,
                                          StaticTimer_t *pxTimerBuffer)
\details
The event \b xTimerCreateStatic is generated when function xTimerCreateStatic is called.

\b Value in the Event Recorder shows:
 - \b pcTimerName         : human readable timer name.
 - \b xTimerPeriodInTicks : the period of the timer in ticks.
 - \b xAutoReload         : auto reload flag.
 - \b pvTimerID           : identifier assigned to the timer being created.
 - \b pxCallbackFunction  : function to call when the timer expired.
 - \b pxTimerBuffer       : pointer to Timer object memory buffer.
*/

/**
\fn void EvrFreeRTOSTimers_xTimerCreateStatic_Return (TimerHandle_t pxNewTimer)
\details
The event \b xTimerCreateStatic_Return is generated before the function xTimerCreateStatic returns.

\b Value in the Event Recorder shows:
 - \b pxNewTimer : Timer object handle.
*/

/**
\fn void EvrFreeRTOSTimers_xTimerGenericCommandFromTask (TimerHandle_t xTimer,
                                                         const BaseType_t xCommandID,
                                                         const TickType_t xOptionalValue,
                                                         BaseType_t *pxHigherPriorityTaskWoken,
                                                         const TickType_t xTicksToWait)
\details
The event \b xTimerGenericCommandFromTask is generated when function xTimerGenericCommandFromTask is called.

\b Value in the Event Recorder shows:
 - \b xTimer                    : Timer object handle.
 - \b xCommandID                : timer command identification.
 - \b xOptionalValue            : optional command value.
 - \b pxHigherPriorityTaskWoken : pointer to variable where information if any task was woken will be stored.
 - \b xTicksToWait              : number of ticks to wait.
*/

/**
\fn void EvrFreeRTOSTimers_xTimerGenericCommandFromTask_Return (BaseType_t xReturn)
\details
The event \b xTimerGenericCommandFromTask_Return is generated before the function xTimerGenericCommandFromTask returns.

\b Value in the Event Recorder shows:
 - \b xReturn : execution status.
*/

/**
\fn void EvrFreeRTOSTimers_xTimerGenericCommandFromISR (TimerHandle_t xTimer,
                                                        const BaseType_t xCommandID,
                                                        const TickType_t xOptionalValue,
                                                        BaseType_t *pxHigherPriorityTaskWoken,
                                                        const TickType_t xTicksToWait)
\details
The event \b xTimerGenericCommandFromISR is generated when function xTimerGenericCommandFromISR is called.

\b Value in the Event Recorder shows:
 - \b xTimer                    : Timer object handle.
 - \b xCommandID                : timer command identification.
 - \b xOptionalValue            : optional command value.
 - \b pxHigherPriorityTaskWoken : pointer to variable where information if any task was woken will be stored.
 - \b xTicksToWait              : number of ticks to wait.
*/

/**
\fn void EvrFreeRTOSTimers_xTimerGenericCommandFromISR_Return (BaseType_t xReturn)
\details
The event \b xTimerGenericCommandFromISR_Return is generated before the function xTimerGenericCommandFromISR returns.

\b Value in the Event Recorder shows:
 - \b xReturn : execution status.
*/

/**
\fn void EvrFreeRTOSTimers_xTimerGetTimerDaemonTaskHandle (void)
\details
The event \b xTimerGetTimerDaemonTaskHandle is generated when function xTimerGetTimerDaemonTaskHandle is called.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTimers_xTimerGetTimerDaemonTaskHandle_Return (TaskHandle_t xTimerTaskHandle)
\details
The event \b _Return is generated before the function xTimerGetTimerDaemonTaskHandle returns.

\b Value in the Event Recorder shows:
 - \b xTimerTaskHandle : Timer task handle.
*/

/**
\fn void EvrFreeRTOSTimers_xTimerGetPeriod (TimerHandle_t xTimer)
\details
The event \b xTimerGetPeriod is generated when function xTimerGetPeriod is called.

\b Value in the Event Recorder shows:
 - \b xTimer : Timer object handle.
*/

/**
\fn void EvrFreeRTOSTimers_xTimerGetPeriod_Return (uint32_t xReturn)
\details
The event \b xTimerGetPeriod_Return is generated before the function xTimerGetPeriod returns.

\b Value in the Event Recorder shows:
 - \b xReturn : timer period in ticks.
*/

/**
\fn void EvrFreeRTOSTimers_vTimerSetReloadMode (TimerHandle_t xTimer, const BaseType_t xAutoReload)
\details
The event \b vTimerSetReloadMode is generated when function vTimerSetReloadMode is called.

\b Value in the Event Recorder shows:
 - \b xTimer      : Timer object handle.
 - \b xAutoReload : auto reload mode.
*/

/**
\fn void EvrFreeRTOSTimers_vTimerSetReloadMode_Return (void)
\details
The event \b vTimerSetReloadMode_Return is generated before the function vTimerSetReloadMode returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTimers_xTimerGetReloadMode (TimerHandle_t xTimer)
\details
The event \b xTimerGetReloadMode is generated when function xTimerGetReloadMode is called.

\b Value in the Event Recorder shows:
 - \b xTimer : Timer object handle. 
*/

/**
\fn void EvrFreeRTOSTimers_xTimerGetReloadMode_Return (BaseType_t xReturn)
\details
The event \b xTimerGetReloadMode_Return is generated before the function xTimerGetReloadMode returns.

\b Value in the Event Recorder shows:
 - \b xReturn : timer auto-reload mode.
*/

/**
\fn void EvrFreeRTOSTimers_uxTimerGetReloadMode (TimerHandle_t xTimer)
\details
The event \b uxTimerGetReloadMode is generated when function uxTimerGetReloadMode is called.

\b Value in the Event Recorder shows:
 - \b xTimer : Timer object handle.
*/

/**
\fn void EvrFreeRTOSTimers_uxTimerGetReloadMode_Return (UBaseType_t uxReturn)
\details
The event \b uxTimerGetReloadMode_Return is generated before the function uxTimerGetReloadMode returns.

\b Value in the Event Recorder shows:
 - \b uxReturn : timer auto-reload mode.
*/

/**
\fn void EvrFreeRTOSTimers_xTimerGetExpiryTime (TimerHandle_t xTimer)
\details
The event \b xTimerGetExpiryTime is generated when function xTimerGetExpiryTime is called.

\b Value in the Event Recorder shows:
 - \b xTimer : Timer object handle.
*/

/**
\fn void EvrFreeRTOSTimers_xTimerGetExpiryTime_Return (TickType_t xReturn)
\details
The event \b xTimerGetExpiryTime_Return is generated before the function xTimerGetExpiryTime returns.

\b Value in the Event Recorder shows:
 - \b xReturn : the time at which the timer will expire.
*/

/**
\fn void EvrFreeRTOSTimers_xTimerGetStaticBuffer (TimerHandle_t xTimer, uint32_t ppxTimerBuffer)
\details
The event \b xTimerGetStaticBuffer is generated when function xTimerGetStaticBuffer is called.

\b Value in the Event Recorder shows:
 - \b xTimer         : Timer object handle.
 - \b ppxTimerBuffer : pointer to memory where object buffer location is stored.
*/

/**
\fn void EvrFreeRTOSTimers_xTimerGetStaticBuffer_Return (BaseType_t xReturn)
\details
The event \b xTimerGetStaticBuffer_Return is generated before the function xTimerGetStaticBuffer returns.

\b Value in the Event Recorder shows:
 - \b xReturn : execution status.
*/

/**
\fn void EvrFreeRTOSTimers_pcTimerGetName (TimerHandle_t xTimer)
\details
The event \b pcTimerGetName is generated when function pcTimerGetName is called.

\b Value in the Event Recorder shows:
 - \b xTimer : Timer object handle.
*/

/**
\fn void EvrFreeRTOSTimers_pcTimerGetName_Return (const char *pcTimerName)
\details
The event \b pcTimerGetName_Return is generated before the function pcTimerGetName returns.

\b Value in the Event Recorder shows:
 - \b pcTimerName : the name assigned to the Timer object.
*/

/**
\fn void EvrFreeRTOSTimers_xTimerIsTimerActive (TimerHandle_t xTimer)
\details
The event \b xTimerIsTimerActive is generated when function xTimerIsTimerActive is called.

\b Value in the Event Recorder shows:
 - \b xTimer : Timer object handle.
*/

/**
\fn void EvrFreeRTOSTimers_xTimerIsTimerActive_Return (BaseType_t xReturn)
\details
The event \b xTimerIsTimerActive_Return is generated before the function xTimerIsTimerActive returns.

\b Value in the Event Recorder shows:
 - \b xReturn : indication whether the timer is active or dormant.
*/

/**
\fn void EvrFreeRTOSTimers_pvTimerGetTimerID (const TimerHandle_t xTimer)
\details
The event \b pvTimerGetTimerID is generated when function pvTimerGetTimerID is called.

\b Value in the Event Recorder shows:
 - \b xTimer : Timer object handle.
*/

/**
\fn void EvrFreeRTOSTimers_pvTimerGetTimerID_Return (void *pvReturn)
\details
The event \b pvTimerGetTimerID_Return is generated before the function pvTimerGetTimerID returns.

\b Value in the Event Recorder shows:
 - \b pvReturn : ID assigned to the timer being queried.
*/

/**
\fn void EvrFreeRTOSTimers_vTimerSetTimerID (TimerHandle_t xTimer, void *pvNewID)
\details
The event \b vTimerSetTimerID is generated when function vTimerSetTimerID is called.

\b Value in the Event Recorder shows:
 - \b xTimer  : Timer object handle.
 - \b pvNewID : ID to assign to the timer.
*/

/**
\fn void EvrFreeRTOSTimers_vTimerSetTimerID_Return (void)
\details
The event \b vTimerSetTimerID_Return is generated before the function vTimerSetTimerID returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSTimers_xTimerPendFunctionCallFromISR (PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken)
\details
The event \b xTimerPendFunctionCallFromISR is generated when function xTimerPendFunctionCallFromISR is called.

\b Value in the Event Recorder shows:
 - \b xFunctionToPend           : the callback function to execute from the timer daemon task.
 - \b pvParameter1              : the callback function first argument.
 - \b ulParameter2              : the callback function second argument.
 - \b pxHigherPriorityTaskWoken : pointer to variable where information if any task was woken will be stored.
*/

/**
\fn void EvrFreeRTOSTimers_xTimerPendFunctionCallFromISR_Return (BaseType_t xReturn)
\details
The event \b xTimerPendFunctionCallFromISR_Return is generated before the function xTimerPendFunctionCallFromISR returns.

\b Value in the Event Recorder shows:
 - \b xReturn : execution status.
*/

/**
\fn void EvrFreeRTOSTimers_xTimerPendFunctionCall (PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, TickType_t xTicksToWait)
\details
The event \b xTimerPendFunctionCall is generated when function xTimerPendFunctionCall is called.

\b Value in the Event Recorder shows:
 - \b xFunctionToPend : the callback function to execute from the timer daemon task.
 - \b pvParameter1    : the callback function first argument.
 - \b ulParameter2    : the callback function second argument.
 - \b xTicksToWait    : the amount of time to wait until timer queue is free.
*/

/**
\fn void EvrFreeRTOSTimers_xTimerPendFunctionCall_Return (BaseType_t xReturn)
\details
The event \b xTimerPendFunctionCall_Return is generated before the function xTimerPendFunctionCall returns.

\b Value in the Event Recorder shows:
 - \b xReturn : execution status.
*/

/**
\fn void EvrFreeRTOSTimers_uxTimerGetTimerNumber (TimerHandle_t xTimer)
\details
The event \b uxTimerGetTimerNumber is generated when function uxTimerGetTimerNumber is called.

\b Value in the Event Recorder shows:
 - \b xTimer  : Timer object handle.
*/

/**
\fn void EvrFreeRTOSTimers_uxTimerGetTimerNumber_Return (UBaseType_t uxReturn)
\details
The event \b uxTimerGetTimerNumber_Return is generated before the function uxTimerGetTimerNumber returns.

\b Value in the Event Recorder shows:
 - \b uxReturn : the number assigned to the Timer object.
*/

/**
\fn void EvrFreeRTOSTimers_vTimerSetTimerNumber (TimerHandle_t xTimer, UBaseType_t uxTimerNumber)
\details
The event \b vTimerSetTimerNumber is generated when function vTimerSetTimerNumber is called.

\b Value in the Event Recorder shows:
 - \b xTimer        : Timer object handle.
 - \b uxTimerNumber : the number to assign to the Timer object.
*/

/**
\fn void EvrFreeRTOSTimers_vTimerSetTimerNumber_Return (void)
\details
The event \b vTimerSetTimerNumber_Return is generated before the function vTimerSetTimerNumber returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
@}
*/


/**
\defgroup freertos_evr_event_groups Event Groups Functions
\brief Events generated by event groups functions 
\details
@{
*/

/**
\fn void EvrFreeRTOSEventGroups_EventGroupCreate (EventGroup_t pxEventGroup)
\details
The event \b EventGroupCreate is generated when Event Groups object is successfully created.

\b Value in the Event Recorder shows:
 - \b pxEventGroup : pointer to Event Groups object handle (control block address)
*/

/**
\fn void EvrFreeRTOSEventGroups_EventGroupCreateFailed (void)
\details
The event \b EventGroupCreateFailed is generated when Event Groups object create fails due to insufficient heap memory.
*/

/**
\fn void EvrFreeRTOSEventGroups_EventGroupSyncBlock (EventGroup_t pxEventGroup, uint32_t uxBitsToSet, uint32_t uxBitsToWaitFor)
\details
The event \b EventGroupSyncBlock is generated before the function xEventGroupSync enters blocked state.

\b Value in the Event Recorder shows:
 - \b pxEventGroup : pointer to Event Groups object handle (control block address)
 - \b uxBitsToSet : event bits that shall be set.
 - \b uxBitsToWaitFor : event bits to wait for.
*/

/**
\fn void EvrFreeRTOSEventGroups_EventGroupSyncEnd (EventGroup_t pxEventGroup, uint32_t uxBitsToSet, uint32_t uxBitsToWaitFor, uint32_t xTimeoutOccurred)
\details
The event \b EventGroupSyncEnd is generated before the function xEventGroupSync returns.

\b Value in the Event Recorder shows:
 - \b pxEventGroup : pointer to Event Groups object handle (control block address)
 - \b uxBitsToSet : event bits that shall be set.
 - \b uxBitsToWaitFor : event bits to wait for.
 - \b xTimeoutOccurred : timeout value (0=timeout occurred, 1=no timeout)
*/

/**
\fn void EvrFreeRTOSEventGroups_EventGroupWaitBitsBlock (EventGroup_t pxEventGroup, uint32_t uxBitsToWaitFor)
\details
The event \b EventGroupWaitBitsBlock is generated before the function xEventGroupWaitBits enters blocked state.

\b Value in the Event Recorder shows:
 - \b pxEventGroup : pointer to Event Groups object handle (control block address)
 - \b uxBitsToWaitFor : event bits to wait for.
*/

/**
\fn void EvrFreeRTOSEventGroups_EventGroupWaitBitsEnd (EventGroup_t pxEventGroup, uint32_t uxBitsToWaitFor, uint32_t xTimeoutOccurred)
\details
The event \b EventGroupWaitBitsEnd is generated before the function xEventGroupWaitBits returns.

\b Value in the Event Recorder shows:
 - \b pxEventGroup : pointer to Event Groups object handle (control block address)
 - \b uxBitsToWaitFor : event bits to wait for.
 - \b xTimeoutOccurred : timeout value (0=timeout occurred, 1=no timeout)
*/

/**
\fn void EvrFreeRTOSEventGroups_EventGroupClearBits (EventGroup_t pxEventGroup, uint32_t uxBitsToClear)
\details
The event \b EventGroupClearBits is generated when the function xEventGroupClearBits is called.

\b Value in the Event Recorder shows:
 - \b pxEventGroup : pointer to Event Groups object handle (control block address)
 - \b uxBitsToClear : event bits that shall be cleared.
*/

/**
\fn void EvrFreeRTOSEventGroups_EventGroupClearBitsFromIsr (EventGroup_t pxEventGroup, uint32_t uxBitsToClear)
\details
The event \b EventGroupClearBitsFromIsr is generated when the function xEventGroupClearBitsFromISR is called.

\b Value in the Event Recorder shows:
 - \b pxEventGroup : pointer to Event Groups object handle (control block address)
 - \b uxBitsToClear : event bits that shall be cleared.
*/

/**
\fn void EvrFreeRTOSEventGroups_EventGroupSetBits (EventGroup_t pxEventGroup, uint32_t uxBitsToSet)
\details
The event \b EventGroupSetBits is generated when the function xEventGroupSetBits is called.

\b Value in the Event Recorder shows:
 - \b pxEventGroup : pointer to Event Groups object handle (control block address)
 - \b uxBitsToSet : event bits that shall be set.
*/

/**
\fn void EvrFreeRTOSEventGroups_EventGroupSetBitsFromIsr (EventGroup_t pxEventGroup, uint32_t uxBitsToSet)
\details
The event \b EventGroupSetBitsFromIsr is generated when the function xEventGroupSetBitsFromISR is called.

\b Value in the Event Recorder shows:
 - \b pxEventGroup : pointer to Event Groups object handle (control block address)
 - \b uxBitsToSet : event bits that shall be set.
*/

/**
\fn void EvrFreeRTOSEventGroups_EventGroupDelete (EventGroup_t pxEventGroup)
\details
The event \b EventGroupDelete is generated when Event Group object is successfully added to object delete queue.

\b Value in the Event Recorder shows:
 - \b pxEventGroup : pointer to Event Groups object handle (control block address)
*/

/**
\fn void EvrFreeRTOSEventGroups_xEventGroupCreateStatic (StaticEventGroup_t *pxEventGroupBuffer)
\details
The event \b xEventGroupCreateStatic is generated when function xEventGroupCreateStatic is called.

\b Value in the Event Recorder shows:
 - \b pxEventGroupBuffer : pointer to Event Groups data structure.
*/

/**
\fn void EvrFreeRTOSEventGroups_xEventGroupCreateStatic_Return (EventGroupHandle_t xEventGroup)
\details
The event \b xEventGroupCreateStatic_Return is generated before function xEventGroupCreateStatic returns.

\b Value in the Event Recorder shows:
 - \b xEventGroup : pointer to Event Groups object handle.
*/

/**
\fn void EvrFreeRTOSEventGroups_xEventGroupCreate (void)
\details
The event \b  is generated when function xEventGroupCreate is called.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSEventGroups_xEventGroupCreate_Return (EventGroupHandle_t xEventGroup)
\details
The event \b xEventGroupCreate_Return is generated before function xEventGroupCreate returns.

\b Value in the Event Recorder shows:
 - \b xEventGroup : pointer to Event Groups object handle.
*/

/**
\fn void EvrFreeRTOSEventGroups_xEventGroupSync (EventGroupHandle_t xEventGroup,
                                             const EventBits_t uxBitsToSet,
                                             const EventBits_t uxBitsToWaitFor,
                                             TickType_t xTicksToWait)
\details
The event \b xEventGroupSync is generated when function xEventGroupSync is called.

\b Value in the Event Recorder shows:
 - \b xEventGroup     : pointer to Event Groups object handle.
 - \b uxBitsToSet     : bits to set in the Event Group before waiting.
 - \b uxBitsToWaitFor : bits to wait for.
 - \b xTicksToWait    : amount of time to wait for.
*/

/**
\fn void EvrFreeRTOSEventGroups_xEventGroupSync_Return (EventBits_t uxReturn)
\details
The event \b xEventGroupSync_Return is generated before function xEventGroupSync returns.

\b Value in the Event Recorder shows:
 - \b uxReturn : the bits after wait or when block time expired.
*/

/**
\fn void EvrFreeRTOSEventGroups_xEventGroupWaitBits (EventGroupHandle_t xEventGroup,
                                                 const EventBits_t uxBitsToWaitFor,
                                                 const BaseType_t xClearOnExit,
                                                 const BaseType_t xWaitForAllBits,
                                                 TickType_t xTicksToWait)
\details
The event \b xEventGroupWaitBits is generated when function xEventGroupWaitBits is called.

\b Value in the Event Recorder shows:
 - \b xEventGroup     : pointer to Event Groups object handle.
 - \b uxBitsToWaitFor : the bits to wait for.
 - \b xClearOnExit    : specifies if the bits are cleared on exit.
 - \b xWaitForAllBits : specified if function waits until all bits are set.
 - \b xTicksToWait    : amount of time to wait for.
*/

/**
\fn void EvrFreeRTOSEventGroups_xEventGroupWaitBits_Return (EventBits_t uxReturn)
\details
The event \b xEventGroupWaitBits is generated before function xEventGroupWaitBits returns.

\b Value in the Event Recorder shows:
 - \b uxReturn : the bits after wait or when block time expired.
*/

/**
\fn void EvrFreeRTOSEventGroups_xEventGroupClearBits (EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear)
\details
The event \b xEventGroupClearBits is generated when function xEventGroupClearBits is called.

\b Value in the Event Recorder shows:
 - \b xEventGroup   : pointer to Event Groups object handle.
 - \b uxBitsToClear : the bits to clear.
*/

/**
\fn void EvrFreeRTOSEventGroups_xEventGroupClearBits_Return (EventBits_t uxReturn)
\details
The event \b xEventGroupClearBits_Return is generated before function xEventGroupClearBits returns.

\b Value in the Event Recorder shows:
 - \b uxReturn : the bits before clearing.
*/

/**
\fn void EvrFreeRTOSEventGroups_xEventGroupClearBitsFromISR (EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear)
\details
The event \b xEventGroupClearBitsFromISR is generated when function xEventGroupClearBitsFromISR is called.

\b Value in the Event Recorder shows:
 - \b xEventGroup   : pointer to Event Groups object handle.
 - \b uxBitsToClear : the bits to clear.
*/

/**
\fn void EvrFreeRTOSEventGroups_xEventGroupClearBitsFromISR_Return (BaseType_t xReturn)
\details
The event \b xEventGroupClearBitsFromISR_Return is generated before function xEventGroupClearBitsFromISR returns.

\b Value in the Event Recorder shows:
 - \b xReturn : execution status.
*/

/**
\fn void EvrFreeRTOSEventGroups_xEventGroupGetBitsFromISR (EventGroupHandle_t xEventGroup)
\details
The event \b xEventGroupGetBitsFromISR is generated when function xEventGroupGetBitsFromISR is called.

\b Value in the Event Recorder shows:
 - \b xEventGroup : pointer to Event Groups object handle. 
*/

/**
\fn void EvrFreeRTOSEventGroups_xEventGroupGetBitsFromISR_Return (EventBits_t uxReturn)
\details
The event \b xEventGroupGetBitsFromISR_Return is generated before function xEventGroupGetBitsFromISR returns.

\b Value in the Event Recorder shows:
 - \b uxReturn : the set bits.
*/

/**
\fn void EvrFreeRTOSEventGroups_xEventGroupSetBits (EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet)
\details
The event \b xEventGroupSetBits is generated when function xEventGroupSetBits is called.

\b Value in the Event Recorder shows:
 - \b xEventGroup : pointer to Event Groups object handle.
 - \b uxBitsToSet : the bits to set.
*/

/**
\fn void EvrFreeRTOSEventGroups_xEventGroupSetBits_Return (EventBits_t uxReturn)
\details
The event \b xEventGroupSetBits_Return is generated before function xEventGroupSetBits returns.

\b Value in the Event Recorder shows:
 - \b uxReturn : the bits set at the time function returns.
*/

/**
\fn void EvrFreeRTOSEventGroups_vEventGroupDelete (EventGroupHandle_t xEventGroup)
\details
The event \b vEventGroupDelete is generated when function vEventGroupDelete is called.

\b Value in the Event Recorder shows:
 - \b xEventGroup : pointer to Event Groups object handle.
*/

/**
\fn void EvrFreeRTOSEventGroups_vEventGroupDelete_Return (void)
\details
The event \b vEventGroupDelete_Return is generated before function vEventGroupDelete returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSEventGroups_xEventGroupGetStaticBuffer (EventGroupHandle_t xEventGroup, StaticEventGroup_t **ppxEventGroupBuffer)
\details
The event \b xEventGroupGetStaticBuffer is generated when function xEventGroupGetStaticBuffer is called.

\b Value in the Event Recorder shows:
 - \b xEventGroup         : pointer to Event Groups object handle.
 - \b ppxEventGroupBuffer : pointer to memory where pointer to Event Groups object data buffer is stored.
*/

/**
\fn void EvrFreeRTOSEventGroups_xEventGroupGetStaticBuffer_Return (BaseType_t xReturn)
\details
The event \b xEventGroupGetStaticBuffer_Return is generated before function xEventGroupGetStaticBuffer returns.

\b Value in the Event Recorder shows:
 - \b xReturn : execution status.
*/

/**
\fn void EvrFreeRTOSEventGroups_vEventGroupSetBitsCallback (void *pvEventGroup, uint32_t ulBitsToSet)
\details
The event \b vEventGroupSetBitsCallback is generated when function vEventGroupSetBitsCallback is called.

\b Value in the Event Recorder shows:
 - \b pvEventGroup : pointer to Event Groups object handle.
 - \b ulBitsToSet  : bits to set.
*/

/**
\fn void EvrFreeRTOSEventGroups_vEventGroupSetBitsCallback_Return (void)
\details
The event \b vEventGroupSetBitsCallback_Return is generated before function vEventGroupSetBitsCallback returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSEventGroups_vEventGroupClearBitsCallback (void *pvEventGroup, uint32_t ulBitsToClear)
\details
The event \b vEventGroupClearBitsCallback is generated when function vEventGroupClearBitsCallback is called.

\b Value in the Event Recorder shows:
 - \b pvEventGroup  : pointer to Event Groups object handle.
 - \b ulBitsToClear : bits to clear.
*/

/**
\fn void EvrFreeRTOSEventGroups_vEventGroupClearBitsCallback_Return (void)
\details
The event \b vEventGroupClearBitsCallback_Return is generated before function vEventGroupClearBitsCallback returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
\fn void EvrFreeRTOSEventGroups_xEventGroupSetBitsFromISR (EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t * pxHigherPriorityTaskWoken)
\details
The event \b xEventGroupSetBitsFromISR is generated when function xEventGroupSetBitsFromISR is called.

\b Value in the Event Recorder shows:
 - \b xEventGroup               : pointer to Event Groups object handle.
 - \b uxBitsToSet               : bits to set
 - \b pxHigherPriorityTaskWoken : pointer to variable where information if any task was woken will be stored.
*/

/**
\fn void EvrFreeRTOSEventGroups_xEventGroupSetBitsFromISR_Return (BaseType_t xReturn)
\details
The event \b xEventGroupSetBitsFromISR_Return is generated before function xEventGroupSetBitsFromISR returns.

\b Value in the Event Recorder shows:
 - \b xReturn : execution status.
*/

/**
\fn void EvrFreeRTOSEventGroups_uxEventGroupGetNumber (void *xEventGroup)
\details
The event \b uxEventGroupGetNumber is generated when function uxEventGroupGetNumber is called.

\b Value in the Event Recorder shows:
 - \b xEventGroup : pointer to Event Groups object handle.
*/

/**
\fn void EvrFreeRTOSEventGroups_uxEventGroupGetNumber_Return (UBaseType_t xReturn)
\details
The event \b uxEventGroupGetNumber_Return is generated before function uxEventGroupGetNumber returns.

\b Value in the Event Recorder shows:
 - \b xReturn : Event Groups object number.
*/

/**
\fn void EvrFreeRTOSEventGroups_vEventGroupSetNumber (void *xEventGroup, UBaseType_t uxEventGroupNumber)
\details
The event \b vEventGroupSetNumber is generated when function vEventGroupSetNumber is called.

\b Value in the Event Recorder shows:
 - \b xEventGroup        : pointer to Event Groups object handle.
 - \b uxEventGroupNumber : number to assign to the Event Groups object.
*/

/**
\fn void EvrFreeRTOSEventGroups_vEventGroupSetNumber_Return (void)
\details
The event \b vEventGroupSetNumber_Return is generated before function vEventGroupSetNumber returns.

\b Value in the Event Recorder shows:
 - \b no value shown
*/

/**
@}
*/


/**
\defgroup freertos_evr_streambuf Stream Buffer Functions
\brief Events generated by Stream Buffer and Message Buffer functions 
\details
@{
*/

/**
\fn void EvrFreeRTOSStreamBuf_StreamBufferCreateFailed (uint32_t uxIsMessageBuffer)
\details
The event \b StreamBufferCreateFailed is generated when Stream Buffer or Message Buffer object create fails due to insufficient heap memory.

\b Value in the Event Recorder shows:
 - \b uxIsMessageBuffer : buffer type designator, 0 for stream buffer and 1 for message buffer.
*/

/**
\fn void EvrFreeRTOSStreamBuf_StreamBufferCreateStaticFailed (StreamBuffer_t pxStreamBuffer, uint32_t uxIsMessageBuffer)
\details
The event \b StreamBufferCreateStaticFailed is generated when statically allocated Stream Buffer or Message Buffer object fails to initialize.

\b Value in the Event Recorder shows:
 - \b pxStreamBuffer : pointer to statically allocated Stream Buffer object handle.
 - \b uxIsMessageBuffer : buffer type designator, 0 for stream buffer and 1 for message buffer.
*/

/**
\fn void EvrFreeRTOSStreamBuf_StreamBufferCreate (StreamBuffer_t pxStreamBuffer, uint32_t uxIsMessageBuffer)
\details
The event \b StreamBufferCreate is generated when Stream Buffer object was successfully created. 

\b Value in the Event Recorder shows:
 - \b pxStreamBuffer : pointer to Stream Buffer object handle.
 - \b uxIsMessageBuffer : buffer type designator, 0 for stream buffer and 1 for message buffer.
*/

/**
\fn void EvrFreeRTOSStreamBuf_StreamBufferDelete (StreamBuffer_t pxStreamBuffer)
\details
The event \b StreamBufferDelete is generated when Stream Buffer object is deallocated or cleared in case of static allocation.

\b Value in the Event Recorder shows:
 - \b pxStreamBuffer : pointer to Stream Buffer object handle.
*/

/**
\fn void EvrFreeRTOSStreamBuf_StreamBufferReset (StreamBuffer_t pxStreamBuffer)
\details
The event \b StreamBufferReset is generated when Stream Buffer object is reset and re-initialized.

\b Value in the Event Recorder shows:
 - \b pxStreamBuffer : pointer to Stream Buffer object handle.
*/

/**
\fn void EvrFreeRTOSStreamBuf_StreamBufferBlockingOnSend (StreamBuffer_t pxStreamBuffer)
\details
The event \b StreamBufferBlockingOnSend is generated when Stream Buffer send is blocked to wait for free space in the buffer.

\b Value in the Event Recorder shows:
 - \b pxStreamBuffer : pointer to Stream Buffer object handle.
*/

/**
\fn void EvrFreeRTOSStreamBuf_StreamBufferSend (StreamBuffer_t pxStreamBuffer, uint32_t xBytesSent)
\details
The event \b StreamBufferSend is generated when Stream Buffer sends the data into the buffer. 

\b Value in the Event Recorder shows:
 - \b pxStreamBuffer : pointer to Stream Buffer object handle.
 - \b xBytesSent : number of bytes copied into the stream buffer
*/

/**
\fn void EvrFreeRTOSStreamBuf_StreamBufferSendFailed (StreamBuffer_t pxStreamBuffer)
\details
The event \b StreamBufferSendFailed is generated when Stream Buffer failed to send data into the buffer.

\b Value in the Event Recorder shows:
 - \b pxStreamBuffer : pointer to Stream Buffer object handle.
*/

/**
\fn void EvrFreeRTOSStreamBuf_StreamBufferSendFromIsr (StreamBuffer_t pxStreamBuffer, uint32_t xBytesSent)
\details
The event \b StreamBufferSendFromIsr is generated when Stream Buffer send was called from the ISR.

\b Value in the Event Recorder shows:
 - \b pxStreamBuffer : pointer to Stream Buffer object handle.
 - \b xBytesSent : number of bytes copied into the stream buffer
*/

/**
\fn void EvrFreeRTOSStreamBuf_StreamBufferBlockingOnReceive (StreamBuffer_t pxStreamBuffer)
\details
The event \b StreamBufferBlockingOnReceive is generated when Stream Buffer receive is blocked to wait for data to be available.

\b Value in the Event Recorder shows:
 - \b pxStreamBuffer : pointer to Stream Buffer object handle.
*/

/**
\fn void EvrFreeRTOSStreamBuf_StreamBufferReceive (StreamBuffer_t pxStreamBuffer, uint32_t xReceivedLength)
\details
The event \b StreamBufferReceive is generated when Stream Buffer receive is called. 

\b Value in the Event Recorder shows:
 - \b pxStreamBuffer : pointer to Stream Buffer object handle.
 - \b xReceivedLength : number of bytes copied from the stream buffer
*/

/**
\fn void EvrFreeRTOSStreamBuf_StreamBufferReceiveFailed (StreamBuffer_t pxStreamBuffer)
\details
The event \b StreamBufferReceiveFailed is generated when Stream Buffer receive is called and there is no data to receive.

\b Value in the Event Recorder shows:
 - \b pxStreamBuffer : pointer to Stream Buffer object handle.
*/

/**
\fn void EvrFreeRTOSStreamBuf_StreamBufferReceiveFromIsr (StreamBuffer_t pxStreamBuffer, uint32_t xReceivedLength)
\details
The event \b StreamBufferReceiveFromIsr is generated when Stream Buffer receive is called from the ISR.

\b Value in the Event Recorder shows:
 - \b pxStreamBuffer : pointer to Stream Buffer object handle.
 - \b xReceivedLength : number of bytes copied from the stream buffer
*/

/**
@}
*/


/**
\defgroup freertos_evr_heap Heap Functions
\brief Events generated by heap functions 
\details
@{
*/

/**
\fn void EvrFreeRTOSHeap_Malloc (void *pvAddress, uint32_t uiSize)
\details
The event \b Heap_Malloc is generated when a heap memory block is successfully allocated.

\b Value in the Event Recorder shows:
 - \b pvAddress : pointer to allocated memory block.
 - \b uiSize : memory block size in bytes.
*/

/**
\fn void EvrFreeRTOSHeap_Free (void *pvAddress, uint32_t uiSize)
\details
The event \b Heap_Free is generated when a memory block previously allocated by malloc is deallocated.

\b Value in the Event Recorder shows:
 - \b pvAddress : pointer to deallocated memory block.
 - \b uiSize : memory block size in bytes.
*/

/**
@}
*/

/**
@} 
*/
// end group Event Recorder
