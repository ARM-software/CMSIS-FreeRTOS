litani-init(1) "" "Litani Build System"

; Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

; Licensed under the Apache License, Version 2.0 (the "License").
; You may not use this file except in compliance with the License.
; A copy of the License is located at

;     http://www.apache.org/licenses/LICENSE-2.0

; or in the "license" file accompanying this file. This file is distributed
; on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
; express or implied. See the License for the specific language governing
; permissions and limitations under the License.


# NAME

litani init - Set up a new Litani run

# SYNOPSIS

*litani init --project-name* _NAME_
	\[*--stages* _NAME_ [_NAME_ ...]]
	\[*--pools* _NAME:DEPTH_ [_NAME:DEPTH_ ...]]
	\[*--output-directory* _DIR_]
	\[*--output-prefix* _DIR_]
	\[*--output-symlink* _DIR_]
	\[*--no-print-out-dir*]

# DESCRIPTION

This program creates a new Litani run. This deletes previously-added jobs and
allows you to add new jobs with *litani --add-job*, prior to running them with
*litani --run-build*.

When you run this program, Litani will write a file called _.litani_cache_dir_
to the current directory, which will contain the path to Litani's output
directory. Subsequent *litani* runs will read this file to determine where to
find the output directory. Litani will search the following locations for the file:

- The current directory;
- the parent directory, and every ancestor directory up to the filesystem root;
- every child directory, and every descendent down to the filesystem leaves.

This allows you to run *litani init* in the 'root' of a project, and subsequently run *litani add-job* further down in the project.


# MULTIPROCESS SAFETY

It is safe but pointless to run *litani init* more than once in
parallel. One of the invocations will 'win', and subsequent invocations
of *litani add-job* will add jobs to a single run.


# OPTIONS

*--project-name* _NAME_
	The code project that this run is associated with. The project name is printed
	at the top of the HTML report. The project name is also included in the
	_run.json_ file to help find all the runs for a particular project.

*--stages* _NAME_ [_NAME_ ...]
	The stages that this run is composed of. At least one stage has to be
	provided. If this flag is not specified, the default stages _build_, _test_
	and _report_ are used.

*--pools* _NAME:DEPTH_ [_NAME:DEPTH_ ...]
	The job pools that you will subsequently add jobs into using the *--pool* flag
	of *litani add-job*. Each argument to this flag 'declares' the named pool with
	a particular depth, where the depth is an integer greater than zero. If you
	declare a pool called _P_ with a depth of _D_, then a maximum of _D_ jobs that
	have been added to the pool called _P_ will run in parallel.

*--output-directory* _DIR_
	Litani will write all of its output files for this run to _DIR_. _DIR_ must
	not already exist. Use this flag when you want exact control over where the
	output files are written; however, *--output-prefix* combined with
	*--output-symlink* can often be more convenient.

*--output-prefix* _DIR_
	Litani will write all of its output files for this run to a fresh directory
	under _DIR_; the fresh directory's name will be a UUID. _DIR_ may already
	exist.

*--output-symlink* _DIR_
	Litani will create a symbolic link from _DIR_ to the output directory. _DIR_
	will be overwritten if it already exists.

	A useful pattern is to run this program as
```
	litani init --output-prefix output --output-symlink output/latest
```
	This way, all Litani runs are stored under the _output_ directory, and the
	_output/latest_ directory always points to the most recent run. It is then
	easy to keep a web browser pointed to _output/latest/html/index.html_, which
	will always resolve to the most recent dashboard.

*--no-print-out-dir*
	Do not print the resolved path to the output directory. This is useful for
	clients that have their own method for printing the output directory's
	location.

# ENVIRONMENT VARIABLES

*LITANI_RUN_ID*
	This is expected to be a unique ID, for example generated by
	*uuidgen*(1). Litani will use the value of this variable as the ID for
	the run. This can be used, for example, by a CI system to set the UUID
	of the Litani run to be the same as the UUID for the CI run.
